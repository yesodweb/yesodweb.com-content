<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="yesods-monads-154"><title>Yesod's Monads</title><conbody>
  <p id="154-x-3">As you've read through this book, there have been a number of monads which have
   appeared: <codeph id="154-x-6">Handler</codeph>, <codeph id="154-x-7">Widget</codeph> and
    <codeph>YesodDB</codeph> (for Persistent). As with most monads, each one provides some specific
   functionality: <codeph id="154-x-9">Handler</codeph> gives access to the request and allows you to
   send responses, a <codeph id="154-x-10">Widget</codeph> contains HTML, CSS, and Javascript, and
    <codeph id="154-x-11">YesodDB</codeph> let's you make database queries. In Model-View-Controller
   (MVC) terms, we could consider <codeph>YesodDB</codeph> to be the model, <codeph>Widget</codeph>
   to be the view, and <codeph>Handler</codeph> to be the controller.</p>
  <p id="154-x-4">So far, we've presented some very straight-forward ways to use these monads: your main
   handler will run in <codeph id="154-x-12">Handler</codeph>, using <codeph id="154-x-13">runDB</codeph> to execute a
    <codeph id="154-x-14">YesodDB</codeph> query, and <codeph id="154-x-15">defaultLayout</codeph> to return a
   <codeph id="154-x-16">Widget</codeph>, which in turn was created by calls to <codeph id="154-x-17">toWidget</codeph>.</p>
  <p id="154-x-5">However, if we have a deeper understanding of these types, we can achieve some fancier
   results.</p>
 </conbody><concept id="transformers-155"><title>Monad Transformers</title><conbody>
  <lq id="155-x-3">Monads are like onions. Monads are <i id="155-x-4">not</i> like cakes.<cite id="155-x-5">Shrek, more or less</cite></lq>
  <p id="155-x-6">Before we get into the heart of Yesod's monads, we need to understand a bit about
   monad transformers. (If you already know all about monad transformers, you can likely skip this
   section.) Different monads provide different functionality: <codeph id="155-x-21">Reader</codeph> allows
   read-only access to some piece of data throughout a computation, <codeph id="155-x-22">Error</codeph> allows
   you to short-circuit computations, and so on.</p>
  <p id="155-x-7">Often times, however, you would like to be able to combine a few of these features
   together. After all, why not have a computation with read-only access to some settings variable,
   that could error out at any time? One approach to this would be to write a new monad like
    <codeph id="155-x-23">ReaderError</codeph>, but this has the obvious downside of exponential complexity:
   you'll need to write a new monad for every single possible combination.</p>
  <p id="155-x-8">Instead, we have monad transformers. In addition to <codeph id="155-x-24">Reader</codeph>, we have
    <codeph id="155-x-25">ReaderT</codeph>, which adds reader functionality to any other monad. So we could
   represent our <codeph id="155-x-26">ReaderError</codeph> as (conceptually):</p>
  <codeblock id="155-x-9" outputclass="haskell">type ReaderError = ReaderT Error</codeblock>
  <p id="155-x-10">In order to access our settings variable, we can use the <codeph id="155-x-11">ask</codeph> function. But what about short-circuiting a computation? We'd like to use
    <codeph id="155-x-27">throwError</codeph>, but that won't exactly work. Instead, we need to <codeph id="155-x-12">lift</codeph> our call into the next monad up. In other words:</p>
  <codeblock id="155-x-13" outputclass="haskell">throwError :: errValue -&gt; Error
lift . throwError :: errValue -&gt; ReaderT Error</codeblock>
  <p id="155-x-14">There are a few things you should pick up here:</p>
  <ul id="155-ul_d29d1697-acc1-4f67-8cc6-a1b8305f865a">
   <li id="155-x-15">A transformer can be used to add functionality to an existing monad.</li>
   <li id="155-x-16">A transformer must always wrap around an existing monad.</li>
   <li id="155-x-17">The functionality available in a wrapped monad will be dependent not only on the
    monad transformer, but also on the inner monad that is being wrapped.</li>
  </ul>
  <p id="155-x-18">A great example of that last point is the <codeph id="155-x-28">IO</codeph> monad. No matter how
   many layers of transformers you have around an <codeph id="155-x-29">IO</codeph>, there's still an
    <codeph id="155-x-30">IO</codeph> at the core, meaning you can perform I/O in any of these <term id="155-x-19">monad transformer stacks</term>. You'll often see code that looks like <codeph id="155-x-20">liftIO
    $ putStrLn "Hello There!"</codeph>.</p>
 </conbody></concept><concept id="the-three-transformers-156"><title>The Three Transformers</title><conbody>
  <p id="156-x-6">We've already discussed two of our transformers previously: <codeph id="156-x-15">Handler</codeph> and
    <codeph id="156-x-16">Widget</codeph>. Just to recap, there are two special things about these
   transformers:</p>
  <ol id="156-ol_izz_wma_af">
   <li id="156-x-22">In order to simplify error messages, they are not actual transformers. Instead, they are
    newtypes that hard-code their inner monads.<note id="156-x-23">Remember, this is why Yesod provides a
     specialized <codeph id="156-x-24">lift</codeph> function, which works for <codeph id="156-x-25">Handler</codeph> and
      <codeph id="156-x-26">Widget</codeph>.</note></li>
   <li id="156-x-27">In reality they have extra type parameters for the sub and master site. As a result, the
    Yesod libraries provide <codeph id="156-x-28">GHandler sub master a</codeph> and <codeph id="156-x-29">GWidget sub master
     a</codeph>, and each site gets a pair of type synonyms <codeph id="156-x-30">type Handler = GHandler MyApp
     MyApp</codeph> and <codeph id="156-x-31">type Widget = GWidget MyApp My App ()</codeph>.</li>
  </ol>
  <p id="156-x-3">In <apiname id="156-x-4">persistent</apiname>, we have a typeclass called
    <codeph id="156-x-32">PersistStore</codeph>. This typeclass defines all of the primitive operations you can
   perform on a database, like <codeph id="156-x-5">get</codeph>. This typeclass essentially looks like
    <codeph id="156-x-7">class (Monad (b m)) =&gt; PersistStore b m</codeph>. <codeph id="156-x-8">b</codeph> is the backend itself, and is in fact a monad transformer, while <codeph id="156-x-9">m</codeph> is the inner monad that <codeph id="156-x-10">b</codeph> wraps around. Both SQL and
   MongoDB have their own instances; in the case of SQL, it looks like:</p>
  <codeblock id="156-x-11" outputclass="haskell">instance MonadBaseControl IO m =&gt; PersistBackend SqlPersist m</codeblock>
  <p id="156-x-12">This means that you can run a SQL database with any underlying monad, so long as that
   underlying monad supports <codeph id="156-x-13">MonadBaseControl IO</codeph>, which allows you to
   properly deal with exceptions in a monad stack. That basically means any transformer stack built
   around <codeph id="156-x-14">IO</codeph> (besides exceptional cases like <codeph id="156-x-33">ContT</codeph>).
   Fortunately for us, that includes both <codeph id="156-x-34">Handler</codeph> and <codeph id="156-x-35">Widget</codeph>. The
   takeaway here is that we can layer our Persistent transformer on top of <codeph id="156-x-36">Handler</codeph>
   or <codeph id="156-x-37">Widget</codeph>.</p>
  <note id="156-x-38">This wasn't always the case. Before Yesod 0.10, Yesod was built on top of enumerators, which
   do not support <codeph id="156-x-39">MonadBaseControl</codeph>. In Yesod 0.10, we moved over to
    <apiname id="156-x-41">conduit</apiname>, which greatly simplified everything we're discussing here.</note>
  <p id="156-x-17">In order to make it simpler to refer to the relevant Persistent transformer, the
    <apiname id="156-x-18">yesod-persistent</apiname> package defines the <codeph id="156-x-19">YesodPersistBackend</codeph>
   associated type. For example, if I have a site called <codeph id="156-x-20">MyApp</codeph> and it uses SQL, I
   would define something like <codeph id="156-x-21">type instance YesodPersistBackend MyApp =
   SqlPersist</codeph>.</p>
  <p id="156-x-40">When we want to run our database actions, we'll have a <codeph id="156-x-42">SqlPersist</codeph>
   wrapped around a <codeph id="156-x-43">Handler</codeph> or <codeph id="156-x-44">Widget</codeph>. We can then use the
   standard Persistent unwrap functions (like <codeph id="156-x-45">runSqlPool</codeph>) to run the action and get
   back a normal <codeph id="156-x-46">Handler</codeph>/<codeph id="156-x-47">Widget</codeph>. To automate this, we provide the
    <codeph id="156-x-48">runDB</codeph> function. Putting it all together, we can now run database actions inside
   our handlers and widgets.</p>
  <p id="156-x-68">Most of the time in Yesod code, and especially thus far in this book, widgets have
   been treated as actionless containers that simply combine together HTML, CSS and Javascript. But
   if you look at that last paragraph again, you'll realize that's not the way things have to be.
   Since a widget is a transformer on top of a handler, anything you do in a handler can be done in
   a widget, including database actions. All you have to do is <codeph id="156-x-49">lift</codeph>.</p>
 </conbody></concept><concept id="navbar-157"><title>Example: Database-driven navbar</title><conbody>
  <p id="157-x-3">Let's put some of this new knowledge into action. We want to create a
                <codeph id="157-x-11">Widget</codeph> that generates its output based on the contents of the
            database. Previously, our approach would have been to load up the data in a
                <codeph id="157-x-12">Handler</codeph>, and then pass that data into a <codeph id="157-x-13">Widget</codeph>.
            Now, we'll do the loading of data in the <codeph id="157-x-15">Widget</codeph> itself. This is a boon
            for modularity, as this <codeph id="157-x-16">Widget</codeph> can be used in any
                <codeph id="157-x-17">Handler</codeph> we want, without any need to pass in the database
            contents.</p>
  <codeblock id="157-x-4" outputclass="haskell">{-# LANGUAGE OverloadedStrings, TypeFamilies, TemplateHaskell, FlexibleContexts,
             QuasiQuotes, MultiParamTypeClasses, GADTs #-}
import Yesod
import Database.Persist.Sqlite
import Data.Text (Text)
import Data.Time
import Control.Monad.Logger (runStderrLoggingT)

share [mkPersist sqlSettings, mkMigrate "migrateAll"] [persist|
Link
    title Text
    url Text
    added UTCTime
|]

data LinksExample = LinksExample ConnectionPool

mkYesod "LinksExample" [parseRoutes|
/ RootR GET
/add-link AddLinkR POST
|]

instance Yesod LinksExample

instance RenderMessage LinksExample FormMessage where
    renderMessage _ _ = defaultFormMessage

instance YesodPersist LinksExample where
    type YesodPersistBackend LinksExample = SqlPersist
    runDB db = do
        LinksExample pool &lt;- getYesod
        runSqlPool db pool

getRootR :: Handler RepHtml
getRootR = defaultLayout [whamlet|
&lt;form method=post action=@{AddLinkR}&gt;
    &lt;p&gt;
        Add a new link to #
        &lt;input type=url name=url value=http://&gt;
        \ titled #
        &lt;input type=text name=title&gt;
        \ #
        &lt;input type=submit value="Add link"&gt;
&lt;h2&gt;Existing links
^{existingLinks}
|]

existingLinks :: Widget
existingLinks = do
    links &lt;- lift $ runDB $ selectList [] [LimitTo 5, Desc LinkAdded]
    [whamlet|
&lt;ul&gt;
    $forall Entity _ link &lt;- links
        &lt;li&gt;
            &lt;a href=#{linkUrl link}&gt;#{linkTitle link}
|]

postAddLinkR :: Handler ()
postAddLinkR = do
    url &lt;- runInputPost $ ireq urlField "url"
    title &lt;- runInputPost $ ireq textField "title"
    now &lt;- liftIO getCurrentTime
    runDB $ insert $ Link title url now
    setMessage "Link added"
    redirect RootR

main :: IO ()
main = withSqlitePool "links.db3" 10 $ \pool -&gt; do
    runStderrLoggingT $ runSqlPool (runMigration migrateAll) pool
    warpDebug 3000 $ LinksExample pool</codeblock>
  <p id="157-x-5">Pay attention in particular to the <codeph id="157-x-6">existingLinks</codeph> function.
            Notice how all we needed to do was apply <codeph id="157-x-7">lift</codeph> to a normal
            database action. And from within <codeph id="157-x-8">getRootR</codeph>, we treated <codeph id="157-x-9">existingLinks</codeph> like any ordinary <codeph id="157-x-10">Widget</codeph>,
            no special parameters at all. See the figure for the output of this app.</p>
  <fig id="157-x-14">
      <title id="157-x-18">Screenshot of the navbar</title>
   <image id="157-image_xpd_yzj_zd" href="../images/navbar.png"/>
  </fig>
 </conbody></concept><concept id="gets-158"><title>Example: Request information</title><conbody>
  <p id="158-x-3">Likewise, you can get request information inside a <codeph id="158-x-7">Widget</codeph>. Here we
            can determine the sort order of a list based on a GET parameter.</p>
  <codeblock id="158-x-4" outputclass="haskell">{-# LANGUAGE OverloadedStrings, TypeFamilies, TemplateHaskell,
             QuasiQuotes, MultiParamTypeClasses, GADTs #-}
import Yesod
import Data.Text (Text)
import Data.List (sortBy)
import Data.Ord (comparing)

data Person = Person
    { personName :: Text
    , personAge :: Int
    }

people :: [Person]
people =
    [ Person "Miriam" 25
    , Person "Eliezer" 3
    , Person "Michael" 26
    , Person "Gavriella" 1
    ]

data People = People

mkYesod "People" [parseRoutes|
/ RootR GET
|]

instance Yesod People

instance RenderMessage People FormMessage where
    renderMessage _ _ = defaultFormMessage


getRootR :: Handler RepHtml
getRootR = defaultLayout [whamlet|
&lt;p&gt;
    &lt;a href="?sort=name"&gt;Sort by name
    \ | #
    &lt;a href="?sort=age"&gt;Sort by age
    \ | #
    &lt;a href="?"&gt;No sort
^{showPeople}
|]

showPeople :: Widget
showPeople = do
    msort &lt;- lift $ runInputGet $ iopt textField "sort"
    let people' =
            case msort of
                Just "name" -&gt; sortBy (comparing personName) people
                Just "age"  -&gt; sortBy (comparing personAge)  people
                _           -&gt; people
    [whamlet|
&lt;dl&gt;
    $forall person &lt;- people'
        &lt;dt&gt;#{personName person}
        &lt;dd&gt;#{show $ personAge person}
|]

main :: IO ()
main = warpDebug 3000 People</codeblock>
  <p id="158-x-5">Once again, all we need to do is <codeph id="158-x-6">lift</codeph> our normal
                <codeph id="158-x-8">Handler</codeph> code (in this case, <codeph id="158-x-9">runInputGet</codeph>) to have
            it run in our <codeph id="158-x-10">Widget</codeph>.</p>
 </conbody></concept><concept id="summary-159"><title>Summary</title><conbody>
  <p id="159-x-3">If you completely ignore this chapter, you'll still be able to use Yesod to great benefit. The
   advantage of understanding how Yesod's monads interact is to be able to produce cleaner, more
   modular code. Being able to perform arbitrary actions in a <codeph id="159-x-4">Widget</codeph> can be a
   powerful tool, and understanding how Persistent and your <codeph id="159-x-5">Handler</codeph> code interact
   can help you make more informed design decisions in your app.</p>
 </conbody></concept></concept>
