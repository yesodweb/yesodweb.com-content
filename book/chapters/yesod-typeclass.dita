<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="yesod-typeclass-63"><title>Yesod Typeclass</title><conbody><p id="63-i1">Every one of our Yesod applications requires an instance of the <codeph id="63-x-3">Yesod</codeph> typeclass. So far, we've only seen <codeph id="63-x-5">defaultLayout</codeph>. In this chapter, we'll explore the meaning of many of the
            methods of the <codeph id="63-x-7">Yesod</codeph> typeclass.</p><p id="63-i2">The <codeph id="63-x-8">Yesod</codeph> typeclass gives us a central place for defining
            settings for our application. Eeverything else has a default definition which is usually
            the right thing. But in order to build a powerful, customized application, you'll
            usually end up wanting to override at least a few of these methods.</p></conbody><concept id="rendering-and-parsing-urls-64"><title>Rendering and Parsing URLs</title><conbody><p id="64-rpu1">We've already mentioned how Yesod is able to automatically render type-safe URLs into a textual URL that can be inserted into an HTML page. Let's say we have a route definition that looks like:</p><codeblock outputclass="haskell" id="64-x1">mkYesod "MyApp" [parseRoutes|
/some/path SomePathR GET
]</codeblock><p id="64-rpu2">If we place <codeph id="64-x-3">SomePathR</codeph> into a hamlet template, how does Yesod render
            it? Yesod always tries to construct <i id="64-x2">absolute</i> URLs. This is especially
            useful once we start creating XML sitemaps and Atom feeds, or sending emails. But in
            order to construct an absolute URL, we need to know the domain name of the
            application.</p><p id="64-rpu3">You might think we could get that information from the user's request, but we still
            need to deal with ports. And even if we get the port number from the request, are we
            using HTTP or HTTPS? And even if you know <i id="64-x3">that</i>, such an approach would
            mean that, depending on how the user submitted a request would generate different URLs.
            For example, we would generate different URLs depending if the user connected to
            "example.com" or "www.example.com". For Search Engine Optimization, we want to be able
            to consolidate on a single canonical URL.</p><p id="64-rpu4">And finally, Yesod doesn't make any assumption about <i id="64-x4">where</i> you host your application. For example, I may have a mostly static site (http://static.example.com/), but I'd like to stick a Yesod-powered Wiki at /wiki/. There is no reliable way for an application to determine what subpath it is being hosted from. So instead of doing all of this guesswork, Yesod needs you to tell it the <term id="64-x5">application root</term>.</p><p id="64-rpu5">Using the wiki example, you would write your <codeph id="64-x-4">Yesod</codeph> instance as:</p><codeblock outputclass="haskell" id="64-x6">instance Yesod MyWiki where
    approot = ApprootStatic "http://static.example.com/wiki"</codeblock><p id="64-rpu6">Notice that there is no trailing slash there. Next, when Yesod wants to construct a URL
            for <codeph id="64-x-5">SomePathR</codeph>, it determines that the relative path for
                <codeph id="64-x-6">SomePathR</codeph> is <codeph id="64-x-7">/some/path</codeph>, appends that to your
                approot and creates <codeph id="64-x-8">http://static.example.com/wiki/some/path</codeph>.</p>
            <p>But if you remember, most of our examples so far haven't used an <codeph>approot</codeph> method. In those cases, our application gets a blank approot, or the empty string. This works for many use cases, since many applications are served from the root of the domain. In such a case, a route like <codeph>SomePathR</codeph> will be rendered to <codeph>/some/path</codeph>, which is a valid relative link from anywhere in your site. However, some use cases (like Atom/RSS feeds or XML sitemaps) require absolute paths. In such cases, you should state your approot explicitly.</p>
            <p>In addition to the <codeph>ApprootStatic</codeph> constructor demonstrated above, you can also use the <codeph>ApprootMaster</codeph> and <codeph>ApprootRequest</codeph> constructors. The former allows you to determine the approot from the foundation value, which would let you load up the approot from a config file, for instance. The latter allows you to additionally use the request value to determine the approot; using this, you could for example provide a different domain name depending on how the user requested the site in the first place.</p>
            <p id="64-rpu8">The scaffolded site uses <codeph>ApprootMaster</codeph> by default, and pulls your approot from a config file on launch. Additionally, it load different settings for developing,
            testing, staging, and production builds, so you can easily test on one domain- like
            localhost- and serve from a different domain.</p>
                </conbody><concept id="joinpath-65"><title>joinPath</title><conbody><p id="65-jp1">In order to convert a type-safe URL into a text value, Yesod uses two helper functions.
            The first is the <codeph id="65-x1">renderRoute</codeph> method of the <codeph id="65-x2">RenderRoute</codeph> typeclass. Every type-safe URL is an instance of this
            typeclass. <codeph id="65-x3">renderRoute</codeph> converts a value into a list of path
            pieces. For example, our <codeph id="65-x4">SomePathR</codeph> from above would be
            converted into <codeph id="65-x-3">["some", "path"]</codeph>.</p><note id="65-x5" type="other" othertype="advanced"><p id="65-jp2">Actually, <codeph id="65-x-4">renderRoute</codeph> produces both the path pieces and a list of
                query-string parameters. The default instances of <codeph id="65-x-5">renderRoute</codeph>
                always provide an empty list of query string parameters. However, it is possible to
                override this. One notable case is the static subsite, which puts a hash of the file
                contents in the query string for caching purposes.</p></note><p id="65-jp3">The other function is the <codeph id="65-x6">joinPath</codeph> method of the Yesod
            typeclass. This function takes four arguments: the foundation value, the application
            root, a list of path segments and a list of query string parameters, and returns a
            textual URL. The default implementation does the "right thing": it separates the path
            pieces by forward slashes, prepends the application root and appends the query
            string.</p><p id="65-jp4">If you are happy with default URL rendering, you should not need to modify it. However, if you want to modify URL rendering to do things like append a trailing slash, this would be the place to do it.</p></conbody></concept><concept id="cleanpath-66"><title>cleanPath</title><conbody><p id="66-cp1">The flip side to <codeph id="66-x1">joinPath</codeph> is <codeph id="66-x2">cleanPath</codeph>. Let's look at how it gets used in the dispatch process:</p><ol id="66-x3"><li id="66-x4">The path info requested by the user is split into a series of path pieces.</li><li id="66-x6">We pass the path pieces to the <codeph id="66-x-3">cleanPath</codeph> function.</li><li id="66-x7">If <codeph id="66-x-4">cleanPath</codeph> indicates a redirect (a <codeph id="66-x-5">Left</codeph> response),
                then a 301 response is sent to the client. This is used to force canonical URLs (eg,
                remove extra slashes).</li><li id="66-x8">Otherwise, we try to dispatch using the response from <codeph id="66-x-6">cleanPath</codeph> (a
                    <codeph id="66-x-7">Right</codeph>). If this works, we return a response. Otherwise, we
                return a 404.</li></ol><p id="66-cp2">This combination allows subsites to retain full control of how their URLs appear, yet allows master sites to have modified URLs. As a simple example, let's see how we could modify Yesod to always produce trailing slashes on URLs:</p><codeblock id="66-x9" outputclass="haskell">-- START
{-# LANGUAGE TypeFamilies, QuasiQuotes, MultiParamTypeClasses, TemplateHaskell, OverloadedStrings #-}
import Yesod
import Network.HTTP.Types (encodePath)
import Blaze.ByteString.Builder.Char.Utf8 (fromText)
import qualified Data.Text as T
import qualified Data.Text.Encoding as TE
import Control.Arrow ((***))
import Data.Monoid (mappend)

data Slash = Slash

mkYesod "Slash" [parseRoutes|
/ RootR GET
/foo FooR GET
|]

instance Yesod Slash where
    joinPath _ ar pieces' qs' =
        fromText ar `mappend` encodePath pieces qs
      where
        qs = map (TE.encodeUtf8 *** go) qs'
        go "" = Nothing
        go x = Just $ TE.encodeUtf8 x
        pieces = pieces' ++ [""]

    -- We want to keep canonical URLs. Therefore, if the URL is missing a
    -- trailing slash, redirect. But the empty set of pieces always stays the
    -- same.
    cleanPath _ [] = Right []
    cleanPath _ s
        | dropWhile (not . T.null) s == [""] = -- the only empty string is the last one
            Right $ init s
        -- Since joinPath will append the missing trailing slash, we simply
        -- remove empty pieces.
        | otherwise = Left $ filter (not . T.null) s

getRootR = defaultLayout [whamlet|
&lt;p&gt;
    &lt;a href=@{RootR}&gt;RootR
&lt;p&gt;
    &lt;a href=@{FooR}&gt;FooR
|]

getFooR = getRootR

main = warpDebug 3000 Slash</codeblock><p id="66-cp3">First, let's look at our <codeph id="66-x-8">joinPath</codeph> implementation. This is copied almost
            verbatim from the default Yesod implementation, with one difference: we append an extra
            empty string to the end. When dealing with path pieces, an empty string will append
            another slash. So adding an extra empty string will force a trailing slash.</p><p id="66-cp4"><codeph id="66-x-9">cleanPath</codeph> is a little bit trickier. First, we check for the empty path
            like before, and if so pass it through as-is. We use Right to indicate that a redirect
            is not necessary. The next clause is actually checking for two different possible URL
            issues:</p><ul id="66-x11"><li id="66-x12">There is a double slash, which would show up as an empty string in the middle of our paths.</li><li id="66-x13">There is a missing trailing slash, which would show up as the last piece not being an empty string.</li></ul><p id="66-cp5">Assuming neither of those conditions hold, then only the last piece is empty, and we
            should dispatch based on all but the last piece. However, if this is not the case, we
            want to redirect to a canonical URL. In this case, we strip out all empty pieces and do
            not bother appending a trailing slash, since <codeph id="66-x-10">joinPath</codeph> will do that for
            us.</p></conbody></concept></concept><concept id="defaultlayout-67"><title>defaultLayout</title><conbody><p id="67-dl1">Most websites like to apply some general template to all of their pages.
                <codeph id="67-x-3">defaultLayout</codeph> is the recommended approach for this. While you could
            just as easily define your own function and call that instead, when you override
                <codeph id="67-x-4">defaultLayout</codeph> all of the Yesod-generated pages (error pages,
            authentication pages) automatically get this style.</p><p id="67-dl2">Overriding is very straight-forward: we use <codeph id="67-x1">widgetToPageContent</codeph>
            to convert a <codeph id="67-x-5">Widget</codeph> to a title, head tags and body tags, and then use
                <codeph id="67-x-6">hamletToRepHtml</codeph> to convert a Hamlet template into a
                <codeph id="67-x-7">RepHtml</codeph>. We can even add extra widget components, like a Lucius
            template from within <codeph id="67-x-8">defaultLayout</codeph>. An example should make this all
            clear:</p><codeblock id="67-x2" outputclass="haskell">{-# LANGUAGE TypeFamilies, QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses, TemplateHaskell #-}
{-# LANGUAGE OverloadedStrings #-}
import Yesod
data Layout = Layout
mkYesod "Layout" [parseRoutes|/ RootR GET|]
instance Yesod Layout where
-- START
    defaultLayout contents = do
        PageContent title headTags bodyTags &lt;- widgetToPageContent $ do
            toWidget [cassius|
#body
    font-family: sans-serif
#wrapper
    width: 760px
    margin: 0 auto
|]
            addWidget contents
        hamletToRepHtml [hamlet|
$doctype 5

&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;#{title}
        ^{headTags}
    &lt;body&gt;
        &lt;div id="wrapper"&gt;
            ^{bodyTags}
|]
-- STOP
getRootR = defaultLayout $ do
    setTitle "Root test"
    toWidget [cassius|body
    color: red
|]
    toWidget [hamlet|&lt;h1&gt;Hello|]
main = warpDebug 4000 Layout</codeblock></conbody><concept id="getmessage-68"><title>getMessage</title><conbody><p id="68-gm1">Even though we haven't covered sessions yet, I'd like to mention
                <codeph id="68-x-3">getMessage</codeph> here. A common pattern in web development is setting a
            message in one handler and displaying it in another. For example, if a user
                <codeph id="68-x-4">POST</codeph>s a form, you may want to redirect him/her to another page
            along with a "Form submission complete" message.</p>
        <note id="68-x-5">This is commonly known as <xref id="68-x-6" href="http://en.wikipedia.org/wiki/Post/Redirect/Get" format="html" scope="external">Post/Redirect/Get</xref>.</note><p id="68-gm2">To facilitate this, Yesod comes built in with a pair of functions:
                <codeph id="68-x-7">setMessage</codeph> sets a message in the user session, and
                <codeph id="68-x-8">getMessage</codeph> retrieves the message (and clears it, so it doesn't
            appear a second time). It's recommended that you put the result of
                <codeph id="68-x-9">getMessage</codeph> into your <codeph id="68-x-10">defaultLayout</codeph>. For
            example:</p><codeblock id="68-x1" outputclass="haskell">{-# LANGUAGE TypeFamilies, QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses, TemplateHaskell #-}
{-# LANGUAGE OverloadedStrings #-}
import Yesod
data Layout = Layout
mkYesod "Layout" [parseRoutes|
/ RootR GET
/msg MsgR GET
|]
instance Yesod Layout where
-- START
    defaultLayout contents = do
        PageContent title headTags bodyTags &lt;- widgetToPageContent contents
        mmsg &lt;- getMessage
        hamletToRepHtml [hamlet|
$doctype 5

&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;#{title}
        ^{headTags}
    &lt;body&gt;
        $maybe msg &lt;- mmsg
            &lt;div #message&gt;#{msg}
        ^{bodyTags}
|]
-- STOP
getRootR = defaultLayout [whamlet|&lt;a href="@{MsgR}"&gt;message|]
getMsgR = setMessage "foo" &gt;&gt; redirect RootR &gt;&gt; return ()
main = warpDebug 4000 Layout
</codeblock><p id="68-gm3">We'll cover <codeph id="68-x-11">getMessage</codeph>/<codeph id="68-x-12">setMessage</codeph> in more detail when
            we <xref id="68-x2" href="sessions.dita#sessions-105">discuss sessions</xref>.</p></conbody></concept></concept><concept id="custom-error-pages-69"><title>Custom error pages</title><conbody><p id="69-cep1">One of the marks of a professional web site is a properly designed error page. Yesod
            gets you a long way there by automatically using your <codeph id="69-x-3">defaultLayout</codeph> for
            displaying error pages. But sometimes, you'll want to go even further. For this, you'll
            want to override the <codeph id="69-x-4">errorHandler</codeph> method:</p><codeblock id="69-x1" outputclass="haskell">{-# LANGUAGE TypeFamilies, QuasiQuotes, OverloadedStrings #-}
{-# LANGUAGE MultiParamTypeClasses, TemplateHaskell #-}
import Yesod
data Layout = Layout
mkYesod "Layout" [parseRoutes|/ RootR GET|]
instance Yesod Layout where
-- START
    errorHandler NotFound = fmap chooseRep $ defaultLayout $ do
        setTitle "Request page not located"
        toWidget [hamlet|
&lt;h1&gt;Not Found
&lt;p&gt;We apologize for the inconvenience, but the requested page could not be located.
|]
    errorHandler other = defaultErrorHandler other
-- STOP
getRootR = defaultLayout [whamlet|Hello World|]
main = warpDebug 4000 Layout</codeblock><p id="69-cep2">Here we specify a custom 404 error page. We can also use the
                <codeph id="69-x-5">defaultErrorHandler</codeph> when we don't want to write a custom handler
            for each error type. Due to type constraints, we need to start off our methods with
                <codeph id="69-x-6">fmap chooseRep</codeph>, but otherwise you can write a typical handler
            function.</p><p id="69-cep3">In fact, you could even use special responses like redirects:</p><codeblock id="69-x2" outputclass="haskell">{-# LANGUAGE TypeFamilies, QuasiQuotes, OverloadedStrings #-}
{-# LANGUAGE MultiParamTypeClasses, TemplateHaskell #-}
import Yesod
data Layout = Layout
mkYesod "Layout" [parseRoutes|/ RootR GET|]
instance Yesod Layout where
-- START
    errorHandler NotFound = redirect RootR
    errorHandler other = defaultErrorHandler other
-- STOP
getRootR = defaultLayout [whamlet|Hello World|]
main = warpDebug 4000 Layout
</codeblock><note id="69-x3">Even though you <i id="69-x4">can</i> do this, I don't actually recommend such practices. A 404 should be a 404.</note></conbody></concept><concept id="external-css-js-70"><title>External CSS and Javascript</title><conbody>
  <note id="70-in-scaffolding">The functionality described here is automatically included in the
   scaffolded site, so you don't need to worry about implementing this yourself.</note>
  <p id="70-x-3">One of the most powerful, and most intimidating, methods in the Yesod typeclass is
    <codeph id="70-x-4">addStaticContent</codeph>. Remember that a Widget consists of multiple
   components, including CSS and Javascript. How exactly does that CSS/JS arrive in the user's
   browser? By default, they are served in the <codeph id="70-x-24">&lt;head&gt;</codeph> of the page, inside
    <codeph id="70-x-25">&lt;style&gt;</codeph> and <codeph id="70-x-26">&lt;script&gt;</codeph> tags, respectively.</p>
  <p id="70-x-5">That might be simple, but it's far from efficient. Every page load will now require loading up
   the CSS/JS from scratch, even if nothing changed! What we really want is to store this content in
   an external file and then refer to it from the HTML.</p>
  <p id="70-x-6">This is where <codeph id="70-x-27">addStaticContent</codeph> comes in. It takes three arguments:
   the filename extension of the content (<codeph id="70-x-28">css</codeph> or <codeph id="70-x-29">js</codeph>), the
   mime-type of the content (<codeph id="70-x-30">text/css</codeph> or <codeph id="70-x-31">text/javascript</codeph>) and the
   content itself. It will then return one of three possible results:</p>
  <dl id="70-x-7">
   <dlentry id="70-x-8">
    <dt id="70-x-9">Nothing</dt>
    <dd id="70-x-10">No static file saving occurred; embed this content directly in the HTML. This is the default
     behavior.</dd>
   </dlentry>
   <dlentry id="70-x-11">
    <dt id="70-x-12">Just (Left Text)</dt>
    <dd id="70-x-13">This content was saved in an external file, and use the given textual link to refer to
     it.</dd>
   </dlentry>
   <dlentry id="70-x-14">
    <dt id="70-x-15">Just (Right (Route a, Query))</dt>
    <dd id="70-x-16">Same, but now use a type-safe URL along with some query string parameters.</dd>
   </dlentry>
  </dl>
  <p id="70-x-17">The <codeph id="70-x-32">Left</codeph> result is useful if you want to store your static files on
   an external server, such as a CDN or memory-backed server. The <codeph id="70-x-33">Right</codeph> result is
   more commonly used, and ties in very well with the static subsite. This is the recommended
   approach for most applications, and is provided by the scaffolded site by default.</p>
  <note id="70-x-18">You might be wondering: if this is the recommended approach, why isn't it the default? The
   problem is that it makes a number of assumptions that don't universally hold: your application
   has a static subsite, and the location of your static files.</note>
  <p id="70-x-19">The scaffolded <codeph id="70-x-34">addStaticContent</codeph> does a number of intelligent things
   to help you out:</p>
  <ul id="70-ul_vlr_nmg_sd">
   <li id="70-x-20">It automatically minifies your Javascript using the <apiname id="70-x-21">hjsmin</apiname> package.</li>
   <li id="70-x-22">It names the output files based on a hash of the file contents. This means you can set your
    cache headers to far in the future without fears of stale content.</li>
   <li id="70-x-23">Also, since filenames are based on hashes, you can be guaranteed that a file doesn't need to
    be written if a file with the same name already exists. The scaffold code automatically checks
    for the existence of that file, and avoids the costly disk I/O of a write if it's not
    necessary.</li>
  </ul>
 </conbody></concept><concept id="smarter-static-files-71"><title>Smarter Static Files</title><conbody>
  <p id="71-x-3">Google recommends an important optimization: <xref id="71-x-4" href="http://code.google.com/speed/page-speed/docs/request.html#ServeFromCookielessDomain" format="html" scope="external">serve static files from a separate domain</xref>. The advantage
   to this approach is that cookies set on your main domain are not sent when retrieving static
   files, thus saving on a bit of bandwidth.</p>
  <p id="71-x-5">To facilitate this, we have the <codeph id="71-x-6">urlRenderOverride</codeph> method. This method
   intercepts the normal URL rendering and sets a special value for some routes. For example, the
   scaffolding defines this method as:</p>
  <codeblock id="71-x-7" outputclass="haskell">    urlRenderOverride y (StaticR s) =
        Just $ uncurry (joinPath y (Settings.staticRoot $ settings y)) $ renderRoute s
    urlRenderOverride _ _ = Nothing</codeblock>
  <p id="71-x-8">This means that static routes are served from a special static root, which you can configure to
   be a different domain. This is a great example of the power and flexibility of type-safe URLs:
   with a single line of code you're able to change the rendering of static routes throughout all of
   your handlers.</p>
 </conbody></concept><concept id="auth-72"><title>Authentication/Authorization</title><conbody>
  <p id="72-x-4">For simple applications, checking permissions inside each handler function can be a
   simple, convenient approach. However, it doesn't scale well. Eventually, you're going to want to
   have a more declarative approach. Many systems out there define ACLs, special config files, and a
   lot of other hocus-pocus. In Yesod, it's just plain old Haskell. There are three methods
   involved:</p>
  <dl id="72-x-5">
   <dlentry id="72-x-6">
    <dt id="72-x-7">isWriteRequest</dt>
    <dd id="72-x-8">Determine if the current request is a "read" or "write" operations. By default,
     Yesod follows RESTful principles, and assumes <codeph id="72-x-3">GET</codeph>, <codeph id="72-x-21">HEAD</codeph>,
      <codeph id="72-x-22">OPTIONS</codeph>, and <codeph id="72-x-23">TRACE</codeph> requests are read-only, while all others
     are can write.</dd>
   </dlentry>
   <dlentry id="72-x-9">
    <dt id="72-x-10">isAuthorized</dt>
    <dd id="72-x-11">Takes a route (i.e., type-safe URL) and a boolean indicating whether or not the
     request is a write request. It returns an <codeph id="72-x-24">AuthResult</codeph>, which can have one of
     three values:<ul id="72-ul_tsw_jog_sd">
      <li id="72-x-12"><codeph id="72-x-25">Authorized</codeph></li>
      <li id="72-x-13"><codeph id="72-x-26">AuthenticationRequired</codeph></li>
      <li id="72-x-14"><codeph id="72-x-27">Unauthorized</codeph></li>
     </ul>By default, it returns <codeph id="72-x-28">Authorized</codeph> for all requests.</dd>
   </dlentry>
   <dlentry id="72-x-15">
    <dt id="72-x-16">authRoute</dt>
    <dd id="72-x-17">If <codeph id="72-x-29">isAuthorized</codeph> returns <codeph id="72-x-30">AuthenticationRequired</codeph>,
     then redirect to the given route. If no route is provided (the default), return a 403
     "Permission Denied" message.</dd>
   </dlentry>
  </dl>
  <p id="72-x-18">These methods tie in nicely with the <apiname id="72-x-19">yesod-auth</apiname> package,
   which is used by the scaffolded site to provide a number of authentication options, such as
   OpenID, BrowserID, email, username and Twitter. We'll cover more concrete examples in the <xref id="72-x-20" href="authentication-and-authorization.dita#authentication-and-authorization-160" format="dita">auth chapter</xref>.</p>
 </conbody></concept><concept id="some-simple-settings-73"><title>Some Simple Settings</title><conbody>
  <p id="73-x-3">Not everything in the Yesod typeclass is complicated. Some methods are simple
   functions. Let's just go through the list:</p>
  <dl id="73-x-4">
   <dlentry id="73-x-5">
    <dt id="73-x-6">encryptKey</dt>
    <dd id="73-x-7">Yesod uses client-side sessions, which are stored in encrypted,
     cryptographically-hashed cookies. Well, as long as you provide an encryption key. If this
     function returns Nothing, then sessions are disabled. This can be a useful optimization on
     sites that don't need session facilities, as it avoids an encrypt/decrypt pair on each
      request.<note>The combination of encryption and hashing guarantees two properties: the session
      payload is tamper-proof, and is opaque. Encryption without hashing would allow a user to
      randomly change the cookie data and still have it accepted by the server, while hashing
      without encryption would allow inspection of the data.</note></dd>
   </dlentry>
   <dlentry id="73-x-8">
    <dt id="73-x-9">clientSessionDuration</dt>
    <dd id="73-x-10">How long a session should last for. By default, this is two hours.</dd>
   </dlentry>
   <dlentry id="73-x-11">
    <dt id="73-x-12">sessionIpAddress</dt>
    <dd id="73-x-13">By default, sessions are tied to an individual IP address. If your users are sitting behind
     a proxy server, this can cause trouble when their IP suddenly changes. This setting lets you
     disable this security feature.</dd>
   </dlentry>
   <dlentry id="73-x-14">
    <dt id="73-x-15">cookiePath</dt>
    <dd id="73-x-16">What paths within your current domain to set cookies for. The default is "/", and will
     almost always be correct. One exception might be when you're serving from a subpath within a
     domain (like our <xref id="73-x-17" href="yesod-typeclass.dita#rendering-and-parsing-urls-64/64-rpu4" format="dita">wiki example above</xref>).</dd>
   </dlentry>
   <dlentry id="73-x-18">
    <dt id="73-x-19">maximumContentLength</dt>
    <dd id="73-x-20">To prevent Denial of Service (DoS) attacks, Yesod will limit the size of request bodies. Some
     of the time, you'll want to bump that limit for some routes (e.g., a file upload page). This is
     where you'd do that.</dd>
   </dlentry>
   <dlentry id="73-x-21">
    <dt id="73-x-22">yepnopeJs</dt>
    <dd id="73-x-23">You can specify the location of the <xref id="73-x-24" href="http://yepnopejs.com/" format="html" scope="external">yepnope</xref> Javascript library. If this is given, then yepnope will be
     used to asynchronously load all of the Javascript on your page.</dd>
   </dlentry>
  </dl>
 </conbody></concept><concept id="summary-74"><title>Summary</title><conbody><p id="74-s1">The Yesod typeclass has a number of overrideable methods that allow you to configure your
            application. They are all optional, and provide
            sensible defaults. By using built-in Yesod constructs like
                <codeph id="74-x-3">defaultLayout</codeph> and <codeph id="74-x-4">getMessage</codeph>, you'll get a
            consistent look-and-feel throughout your site, including pages automatically generated
            by Yesod such as error pages and authentication.</p><p id="74-s2">We haven't covered all the methods in the Yesod typeclass in this chapter. For a full
            listing of methods available, you should consult the Haddock documentation.</p></conbody></concept></concept>
