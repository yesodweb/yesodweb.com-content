<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML 5.0//EN" "http://www.oasis-open.org/docbook/xml/5.0/docbook.dtd"><chapter>
   <title>http-conduit</title>
   <para/>
   <para/>
   <para>Most of Yesod is about serving content over HTTP. But that's only half the story: someone has
   to receive it. And even when you're writing a web app, sometimes that someone will be you. If you
   want to consume content from other services or interact with RESTful APIs, you'll need to write
   client code. And the recommended approach for that is <function>http-conduit</function>.</para>
   <para>This chapter is not directly connected to Yesod, and will be generally useful for anyone
   wanting to make HTTP requests.</para>
   <section>
    <title>Synopsis</title>
    <para/>
    <programlisting language="haskell">{-# LANGUAGE OverloadedStrings #-}
import Network.HTTP.Conduit -- the main module

-- The streaming interface uses conduits
import Data.Conduit
import Data.Conduit.Binary (sinkFile)

import qualified Data.ByteString.Lazy as L
import Control.Monad.IO.Class (liftIO)

main :: IO ()
main = do
    -- Simplest query: just download the information from the given URL as a
    -- lazy ByteString.
    simpleHttp "http://www.example.com/foo.txt" &gt;&gt;= L.writeFile "foo.txt"

    -- Use the streaming interface instead. We need to run all of this inside a
    -- ResourceT, to ensure that all our connections get properly cleaned up in
    -- the case of an exception.
    runResourceT $ do
        -- We need a Manager, which keeps track of open connections. simpleHttp
        -- creates a new manager on each run (i.e., it never reuses
        -- connections).
        manager &lt;- liftIO $ newManager def

        -- A more efficient version of the simpleHttp query above. First we
        -- parse the URL to a request.
        req &lt;- liftIO $ parseUrl "http://www.example.com/foo.txt"

        -- Now get the response
        res &lt;- http req manager

        -- And finally stream the value to a file
        responseBody res $$+- sinkFile "foo.txt"

        -- Make it a POST request, don't follow redirects, and accept any
        -- status code.
        let req2 = req
                { method = "POST"
                , redirectCount = 0
                , checkStatus = \_ _ _ -&gt; Nothing
                }
        res2 &lt;- http req2 manager
        responseBody res2 $$+- sinkFile "post-foo.txt"</programlisting>
   </section>
   <section>
    <title>Concepts</title>
    <para/>
    <para>The simplest way to make a request in <literal>http-conduit</literal> is with the
    <literal>simpleHttp</literal> function. This function takes a <literal>String</literal> giving a URL
   and returns a <literal>ByteString</literal> with the contents of that URL. But under the surface,
   there are a few more steps:</para>
    <itemizedlist>
     <listitem>
      <para>A new connection <literal>Manager</literal> is allocated.</para>
     </listitem>
     <listitem>
      <para>The URL is parsed to a <literal>Request</literal>. If the URL is invalid, then an exception is
    thrown.</para>
     </listitem>
     <listitem>
      <para>The HTTP request is made, following any redirects from the server.</para>
     </listitem>
     <listitem>
      <para>If the response has a status code outside the 200-range, an exception is thrown.</para>
     </listitem>
     <listitem>
      <para>The response body is read into memory and returned.</para>
     </listitem>
     <listitem>
      <para>
       <literal>runResourceT</literal> is called, which will free up any resources (e.g., the open
    socket to the server).</para>
     </listitem>
    </itemizedlist>
    <para>If you want more control of what's going on, then you can configure any of the steps above
   (plus a few more) by explicitly creating a <literal>Request</literal> value, allocating your
    <literal>Manager</literal> manually, and using the <literal>http</literal> and
    <literal>httpLbs</literal> functions.</para>
   </section>
   <section>
    <title>Request</title>
    <para/>
    <para>The easiest way to creating a <literal>Request</literal> is with the <literal>parseUrl</literal>
   function. This function will return a value in any <literal>Failure</literal> monad, such as
    <literal>Maybe</literal> or <literal>IO</literal>. The last of those is the most commonly used, and
   results in a runtime exception whenever an invalid URL is provided. However, you can use a
   different monad if, for example, you want to validate user input.</para>
    <programlisting language="haskell">import Network.HTTP.Conduit
import System.Environment (getArgs)
import qualified Data.ByteString.Lazy as L
import Control.Monad.IO.Class (liftIO)

main :: IO ()
main = do
    args &lt;- getArgs
    case args of
        [urlString] -&gt;
            case parseUrl urlString of
                Nothing -&gt; putStrLn "Sorry, invalid URL"
                Just req -&gt; withManager $ \manager -&gt; do
                    res &lt;- httpLbs req manager
                    liftIO $ L.putStr $ responseBody res
        _ -&gt; putStrLn "Sorry, please provide exactly one URL"</programlisting>
    <para>The <literal>Request</literal> type is abstract so that <literal>http-conduit</literal> can add new
   settings in the future without breaking the API (see the Settings Type
   chapter for more information). In order to make changes to individual records, you use record
   notation. For example, a modification to our program that issues <literal>HEAD</literal> requests
   and prints the response headers would be:</para>
    <programlisting language="haskell">{-# LANGUAGE OverloadedStrings #-}
import Network.HTTP.Conduit
import System.Environment (getArgs)
import qualified Data.ByteString.Lazy as L
import Control.Monad.IO.Class (liftIO)

main :: IO ()
main = do
    args &lt;- getArgs
    case args of
        [urlString] -&gt;
            case parseUrl urlString of
                Nothing -&gt; putStrLn "Sorry, invalid URL"
                Just req -&gt; withManager $ \manager -&gt; do
                    let reqHead = req { method = "HEAD" }
                    res &lt;- http reqHead manager
                    liftIO $ do
                        print $ responseStatus res
                        mapM_ print $ responseHeaders res
        _ -&gt; putStrLn "Sorry, please provide example one URL"</programlisting>
    <para>There are a number of different configuration settings in the API, some noteworthy ones
   are:</para>
    <variablelist>
     <varlistentry>
      <term>proxy</term>
      <listitem>
       <para>Allows you to pass the request through the given proxy server.</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>redirectCount</term>
      <listitem>
       <para>Indicate how many redirects to follow. Default is 10.</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>checkStatus</term>
      <listitem>
       <para>Check the status code of the return value. By default, gives an exception for any non-2XX
     response.</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>requestBody</term>
      <listitem>
       <para>The request body to be sent. Be sure to also update the <literal>method</literal>. For the
     common case of url-encoded data, you can use the <literal>urlEncodedBody</literal> function.</para>
      </listitem>
     </varlistentry>
    </variablelist>
   </section>
   <section>
    <title>Manager</title>
    <para/>
    <para>The connection manager allows you to reuse connections. When making multiple queries to a
   single server (e.g., accessing Amazon S3), this can be critical for creating efficient code. A
   manager will keep track of multiple connections to a given server (taking into account port and
   SSL as well), automatically reaping unused connections as needed. When you make a request,
    <literal>http-conduit</literal> first tries to check out an existing connection. When you're
   finished with the connection (if the server allows keep-alive), the connection is returned to the
   manager. If anything goes wrong, the connection is closed.</para>
    <para>To keep our code exception-safe, we use the <literal>ResourceT</literal> monad transformer. All
   this means for you is that your code needs to be wrapped inside a call to
    <literal>runResourceT</literal>, either implicitly or explicitly, and that code inside that block
   will need to <literal>liftIO</literal> to perform normal IO actions.</para>
    <para>There are two ways you can get ahold of a manager. <literal>newManager</literal> will return a
   manager that will not be automatically closed (you can use <literal>closeManager</literal> to do so
   manually), while <literal>withManager</literal> will start a new <literal>ResourceT</literal> block,
   allow you to use the manager, and then automatically close the <literal>ResourceT</literal> when
   you're done. If you want to use a <literal>ResourceT</literal> for an entire application, and have
   no need to close it, you should probably use <literal>newManager</literal>.</para>
    <para>One other thing to point out: you obviously don't want to create a new manager for each and
   every request; that would defeat the whole purpose. You should create your
    <literal>Manager</literal> early and then share it.</para>
   </section>
   <section>
    <title>Response</title>
    <para/>
    <para>The <literal>Response</literal> datatype has three pieces of information: the status code, the
   response headers, and the response body. The first two are straight-forward; let's discuss the
   body.</para>
    <para>The <literal>Response</literal> type has a type variable to allow the response body to be of
   multiple types. If you want to use <literal>http-conduit</literal>'s streaming interface, you want
   this to be a <literal>Source</literal>. For the simple interface, it will be a lazy
    <literal>ByteString</literal>. One thing to note is that, even though we use a lazy
    <literal>ByteString</literal>, <emphasis>the entire response is held in memory</emphasis>. In other words, we
   perform no lazy I/O in this package.</para>
    <note>
     <para>The <literal>conduit</literal> package does provide a lazy module which would allow you to
   read this value in lazily, but like any lazy I/O, it's a bit unsafe, and definitely
   non-deterministic. If you need it though, you can use it.</para>
    </note>
   </section>
   <section>
    <title>http and httpLbs</title>
    <para/>
    <para>So let's tie it together. The <literal>http</literal> function gives you access to the streaming
   interface (i.e., it returns a <literal>Response</literal> using a <literal>BufferedSource</literal>)
   while <literal>httpLbs</literal> returns a lazy <literal>ByteString</literal>. Both of these return
   values in the <literal>ResourceT</literal> transformer so that they can access the
    <literal>Manager</literal> and have connections handled properly in the case of exceptions.</para>
    <note>
     <para>If you want to ignore the remainder of a large response body, you can connect to the
    <literal>sinkNull</literal> sink. The underlying connection will automatically be closed,
   preventing you from having to read a large response body over the network.</para>
    </note>
   </section>
  </chapter>