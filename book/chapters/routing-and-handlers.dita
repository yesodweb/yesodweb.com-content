<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="routing-and-handlers-75"><title>Routing and Handlers</title><conbody><p id="75-intro1">If we look at Yesod as a Model-View-Controller framework, routing and handlers make up the controller. For contrast, let's describe two other routing approaches used in other web development environments:</p><ul id="75-x1"><li id="75-x2">Dispatch based on file name. This is how PHP and ASP work, for example.</li><li id="75-x3">Have a centralized routing function that parses routes based on regular expressions. Django and Rails follow this approach.</li></ul><p id="75-intro2">Yesod is closer in principle to the latter technique. Even so, there are significant differences. Instead of using regular expressions, Yesod matches on pieces of a route. Instead of having a one-way route-to-handler mapping, Yesod has an intermediate data type (called the route datatype, or a type-safe URL) and creates two-way conversion functions.</p><p id="75-intro3">Coding this more advanced system manually is tedious and error prone. Therefore,
            Yesod defines a Domain Specific Language (DSL) for specifying routes, and provides
            Template Haskell functions to convert this DSL to Haskell code. This chapter will
            explain the syntax of the routing declarations, give you a glimpse of what code is
            generated for you, and explain the interaction between routing and handler
            functions.</p></conbody><concept id="route-syntax-76"><title>Route Syntax</title><conbody>
        <p id="76-x-3">Instead of trying to shoe-horn route declarations into an existing syntax,
            Yesod's approach is to use a simplified syntax designed just for routes. This has the
            advantage of making the code not only easy to write, but simple enough for someone with
            no Yesod experience to read and understand the sitemap of your application.</p>
        <p id="76-x-4">A basic example of this syntax is:</p>
        <codeblock id="76-x-5" outputclass="routes">/             RootR     GET
/blog         BlogR     GET POST
/blog/#BlogId BlogPostR GET POST

/static       StaticR   Static getStatic</codeblock>
        <p id="76-x-6">The next few sections will explain the full details of what goes on in the route
            declaration.</p>
    </conbody><concept id="pieces-77"><title>Pieces</title><conbody><p id="77-pieces1">One of the first thing Yesod does when it gets a request is split up the requested
            path into pieces. The pieces are tokenized at all forward slashes. For example:</p><codeblock id="77-x2" outputclass="haskell">toPieces "/" = []
toPieces "/foo/bar/baz/" = ["foo", "bar", "baz", ""]</codeblock><p id="77-pieces2">You may notice that there are some funny things going on with trailing slashes, or
            double slashes ("/foo//bar//"), or a few other things. Yesod believes in having <term id="77-x3">canonical URLs</term>; if someone requests a URL with a trailing slash, or
            with a double slash, they automatically get a redirect to the canonical version. This
            ensures you have one URL for one resource, and can help with your search rankings.</p><p id="77-pieces3">What this means for you is that you needn't concern yourself
                with the exact structure of your URLs: you can safely think
                about pieces of a path, and Yesod automatically handles
                intercalating the slashes and escaping problematic
                characters.</p><p id="77-pieces4">If, by the way, you want more fine-tuned control of how paths are split into pieces
            and joined together again, you'll want to look at the <codeph id="77-x-3">cleanPath</codeph> and
                <codeph id="77-x-4">joinPath</codeph> methods in the <xref id="77-x4" href="yesod-typeclass.dita#joinpath-65">Yesod typeclass</xref> chapter.</p></conbody><concept id="types-of-pieces-78"><title>Types of Pieces</title><conbody><p id="78-pieces5">When you are declaring your routes, you have three types of pieces at your disposal:</p><dl id="78-x1"><dlentry id="78-x2"><dt id="78-x3">Static</dt><dd id="78-x4">This is a plain string that must be matched against precisely in the URL.</dd></dlentry><dlentry id="78-x5"><dt id="78-x6">Dynamic single</dt><dd id="78-x7">This is a single piece (ie, between two forward slashes), but can be a user-submitted value. This is the primary method of receiving extra user input on a page request. These pieces begin with a hash (#) and are followed by a data type. The datatype must be an instance of <codeph id="78-x8">PathPiece</codeph>.</dd></dlentry><dlentry id="78-x9"><dt id="78-x10">Dynamic multi</dt><dd id="78-x11">The same as before, but can receive multiple pieces of the URL. This must always be the last piece in a resource pattern. It is specified by an asterisk (*) followed by a datatype, which must be an instance of <codeph id="78-x12">PathMultiPiece</codeph>. Multi pieces are not as common as the other two, though they are very important for implementing features like static trees representing file structure or wikis with arbitrary hierarchies.</dd></dlentry></dl><p id="78-pieces6">Let us take a look at some standard kinds of resource patterns you may want to write. Starting simply, the root of an application will just be <codeph id="78-x13">/</codeph>. Similarly, you may want to place your FAQ at <codeph id="78-x14">/page/faq</codeph>.</p><p id="78-pieces7">Now let's say you are going to write a Fibonacci website. You may construct your URLs like <codeph id="78-x15">/fib/#Int</codeph>. But there's a slight problem with this: we do not want to allow negative numbers or zero to be passed into our application. Fortunately, the type system can protect us:</p><codeblock id="78-x16" outputclass="haskell">{-# LANGUAGE TypeFamilies, QuasiQuotes, GeneralizedNewtypeDeriving #-}
{-# LANGUAGE MultiParamTypeClasses, TemplateHaskell #-}
{-# LANGUAGE OverloadedStrings #-}
import Yesod
import qualified Data.Text as T
import Web.PathPieces
data Fibs = Fibs
-- START
newtype Natural = Natural Int
-- STOP
    deriving (Show, Read, Eq, Num, Ord)
-- START
instance PathPiece Natural where
    toPathPiece (Natural i) = T.pack $ show i
    fromPathPiece s =
        case reads $ T.unpack s of
            (i, ""):_
                | i &lt; 1 -&gt; Nothing
                | otherwise -&gt; Just $ Natural i
            [] -&gt; Nothing
-- STOP
mkYesod "Fibs" [parseRoutes|
/fibs/#Natural FibsR GET
|]
instance Yesod Fibs
fibs = 1 : 1 : zipWith (+) fibs (tail fibs)
getFibsR :: Natural -&gt; GHandler Fibs Fibs RepPlain
getFibsR (Natural i) = return $ RepPlain $ toContent $ show $ fibs !! (i - 1)
main = warpDebug 3000 Fibs
</codeblock><p id="78-pieces8">On line 1 we define a simple newtype wrapper around Int to protect ourselves from
            invalid input. We can see that <codeph id="78-x-6">PathPiece</codeph> is a typeclass with two
            methods. <codeph id="78-x17">toPathPiece</codeph> does nothing more than convert to a
                <codeph id="78-x18">Text</codeph>. <codeph id="78-x19">fromPathPiece</codeph>
            <i id="78-x20">attempts</i> to convert a <codeph id="78-x21">Text</codeph> to our datatype,
            returning <codeph id="78-x22">Nothing</codeph> when this conversion is impossible. By using
            this datatype, we can ensure that our handler function is only ever given natural
            numbers, allowing us to once again use the type system to battle the boundary issue.</p>
        <note id="78-x-3">In a real life application, we would also want to ensure we never accidently
            constructed an invalid <codeph id="78-x-4">Natural</codeph> value internally to our app. To do so,
            we could use an approach like <xref id="78-x-5" href="http://www.haskell.org/haskellwiki/Smart_constructors" format="html" scope="external">smart constructors</xref>. For the purposes of this example, we've
            kept the code simple.</note><p id="78-pieces10">Defining a <codeph id="78-x-7">PathMultiPiece</codeph> is just as simple. Let's say we want to
            have a Wiki with at least two levels of hierarchy; we might define a datatype such
            as:</p><codeblock id="78-x23" outputclass="haskell">{-# LANGUAGE TypeFamilies, QuasiQuotes, TemplateHaskell #-}
{-# LANGUAGE OverloadedStrings #-}
import Yesod
import Data.Text (Text)
import Web.PathPieces
data Fibs = Fibs
-- START
data Page = Page Text Text [Text] -- 2 or more
instance PathMultiPiece Page where
    toPathMultiPiece (Page x y z) = x : y : z
    fromPathMultiPiece (x:y:z) = Just $ Page x y z
    fromPathMultiPiece _ = Nothing
-- STOP
main = return ()</codeblock></conbody></concept></concept><concept id="resource-name-79"><title>Resource name</title><conbody><p id="79-rn1">Each resource pattern also has a name associated with it. That
                name will become the constructor for the <term id="79-x1">type safe
                    URL</term> datatype associated with your application.
                Therefore, it has to start with a capital letter. By
                convention, these resource names all end with a capital R.
                There is nothing forcing you to do this, it is just
                common practice.</p><p id="79-rn2">The exact definition of our constructor depends upon the
                resource pattern it is attached to. Whatever datatypes are
                included in single and multi pieces of the pattern become
                arguments to the datatype. This gives us a 1-to-1
                correspondence between our type safe URL values and valid URLs
                in our application.</p><note id="79-x2" type="other" othertype="advanced"><p id="79-rn3">This doesn't necessarily mean that <i id="79-x3">every</i> value
                    is a working page, just that it is is a potentially valid
                    URL. As an example, that value <codeph id="79-x4">PersonR
                        "Michael"</codeph> may not resolve to a valid page if
                    there is no Michael in the database.</p></note><p id="79-rn4">Let's get some real examples going here. If you had the resource patterns <codeph id="79-x5">/person/#Text</codeph> named <codeph id="79-x6">PersonR</codeph>, <codeph id="79-x7">/year/#Int</codeph> named <codeph id="79-x8">YearR</codeph> and <codeph id="79-x9">/page/faq</codeph> named <codeph id="79-x10">FaqR</codeph>, you would end up with a
            route data type roughly looking like:</p><codeblock id="79-x11" outputclass="haskell">data MyRoute = PersonR Text
             | YearR Int
             | FaqR</codeblock><p id="79-rn5">If a user requests the relative URL of
                 <codeph id="79-x12">/year/2009</codeph>, Yesod will convert it into the value
                 <codeph id="79-x13">YearR 2009</codeph>. <codeph id="79-x14">/person/Michael</codeph> becomes
                 <codeph id="79-x15">PersonR "Michael"</codeph> and <codeph id="79-x16">/page/faq</codeph>
                 becomes <codeph id="79-x17">FaqR</codeph>. On the other hand,
                 <codeph id="79-x18">/year/two-thousand-nine</codeph>,
                 <codeph id="79-x19">/person/michael/snoyman</codeph> and
                 <codeph id="79-x20">/page/FAQ</codeph> would all result in 404 errors without
                 ever seeing your code.</p></conbody></concept><concept id="handler-specification-80"><title>Handler specification</title><conbody><p id="80-rn7">The last piece of the puzzle when declaring your resources is how they will be handled. There are three options in Yesod:</p><ul id="80-x1"><li id="80-x2">A single handler function for all request methods on a given route.</li><li id="80-x3">A separate handler function for each request method on a given route. Any other request
                method will generate a 405 Bad Method response.</li><li id="80-x4">You want to pass off to a <term id="80-x5">subsite</term>.</li></ul><p id="80-rn8">The first two can be easily specified. A single handler function will be a line with
            just a resource pattern and the resource name, such as <codeph id="80-x6">/page/faq
                FaqR</codeph>. In this case, the handler function must be named <codeph id="80-x7">handleFaqR</codeph>.</p><p id="80-rn9">A separate handler for each request method will be the same, plus a list of request
            methods. The request methods must be all capital letters. For example, <codeph id="80-x8">/person/#String PersonR GET POST DELETE</codeph>. In this case, you would need to
            define three handler functions: <codeph id="80-x9">getPersonR</codeph>, <codeph id="80-x10">postPersonR</codeph> and <codeph id="80-x11">deletePersonR</codeph>.</p><p id="80-rn10">Subsites are a very useful— but complicated— topic in Yesod. We
                 will <xref id="80-x12" href="creating-a-subsite.dita#creating-a-subsite-186">cover writing subsites
                     later</xref>, but using them is not too difficult. The
                 most commonly used subsite is the static subsite, which serves
                 static files for your application. In order to serve static
                 files from <codeph id="80-x13">/static</codeph>, you would need a resource
                 line like:</p><codeblock outputclass="routes" id="80-x14">/static StaticR Static getStatic</codeblock><p id="80-rn11">In this line, <codeph id="80-x15">/static</codeph> just says where in your URL
                 structure to serve the static files from. There is nothing
                 magical about the word static, you could easily replace it
                 with <codeph id="80-x16">/my/non-dynamic/files</codeph>.</p><p id="80-rn12">The next word, <codeph id="80-x-3">StaticR</codeph>, gives the resource name. The next two words
            specify that we are using a subsite. <codeph id="80-x17">Static</codeph> is the
            name of the <term id="80-x18">subsite foundation datatype</term>, and <codeph id="80-x19">getStatic</codeph> is a function that gets a <codeph id="80-x20">Static</codeph> value
            from a value of your master foundation datatype.</p><p id="80-rn13">Let's not get too caught up in the details of subsites now. We
                 will look more closely at the static subsite in the <xref id="80-x21" href="scaffolding-and-the-site-template.dita#scaffolding-and-the-site-template-166">scaffolded site chapter</xref>.</p></conbody></concept></concept><concept id="dispatch-81"><title>Dispatch</title><conbody><p id="81-dispatch1">Once you have specified your routes, Yesod will take care of all the pesky details
            of URL dispatch for you. You just need to make sure to provide the appropriate <term id="81-x1">handler functions</term>. For subsite routes, you do not need to write any
            handler functions, but you do for the other two. We mentioned the naming rules above
                (<codeph id="81-x-3">MyHandlerR GET</codeph> becomes <codeph id="81-x-4">getMyHandlerR</codeph>, <codeph id="81-x-5">MyOtherHandlerR</codeph> becomes <codeph id="81-x-6">handleMyOtherHandlerR</codeph>). Now we need the type signature.</p></conbody><concept id="return-type-82"><title>Return Type</title><conbody><p id="82-dispatch2">Let's look at a simple handler function:</p><codeblock id="82-x1" outputclass="haskell">{-# LANGUAGE TypeFamilies, QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses, TemplateHaskell #-}
{-# LANGUAGE OverloadedStrings #-}
import Yesod
data Simple = Simple
-- START
mkYesod "Simple" [parseRoutes|
/ HomeR GET
|]

getHomeR :: Handler RepHtml
getHomeR = defaultLayout [whamlet|&lt;h1&gt;This is simple
|]
-- STOP
instance Yesod Simple
main = warpDebug 3000 Simple
</codeblock><p id="82-dispatch3">Look at the type signature of <codeph id="82-x-13">getHomeR</codeph>. The first component is
                <codeph id="82-x-3">Handler</codeph>. <codeph id="82-x-14">Handler</codeph> is a special monad that
            all handler functions live in. It provides access to request information, let's you send
            redirects, and lots of other stuff we'll <xref id="82-x-4" href="routing-and-handlers.dita#the-ghandler-monad-84" format="dita">get to
            soon</xref>.</p>
        <p id="82-x-5">Next we have <codeph id="82-x-6">RepHtml</codeph>. When we <xref id="82-x-7" href="restful-content.dita#representations-148">discuss
                representations</xref> we will explore the <i id="82-x-8">why</i> of things more; for now, we
            are just interested in the <i id="82-x-9">how</i>.</p>
        <p id="82-x-10">As you might guess, <codeph id="82-x-15">RepHtml</codeph> is a datatype for HTML responses.
            And as you also may guess, web sites need to return responses besides HTML. CSS,
            Javascript, images, XML are all necessities of a website. Therefore, the return value of
            a handler function can be any instance of <codeph id="82-x-11">HasReps</codeph>.</p>
        <p id="82-x-12"><codeph id="82-x-16">HasReps</codeph> is a powerful concept that allows Yesod to
            automatically choose the correct representation of your data based on the client
            request. For now, we will focus just on simple instances such as
                <codeph id="82-x-17">RepHtml</codeph>, which only provide one representation.</p></conbody></concept><concept id="arguments-83"><title>Arguments</title><conbody><p id="83-arguments1">Not every route is as simple as the <codeph id="83-x-3">HomeR</codeph> we just defined. Take
            for instance our <codeph id="83-x-4">PersonR</codeph> route from earlier. The name of the person
            needs to be passed to the handler function. This translation is very straight-forward,
            and hopefully intuitive. For example:</p><codeblock id="83-x1" outputclass="haskell">{-# LANGUAGE TypeFamilies, QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses, TemplateHaskell #-}
{-# LANGUAGE OverloadedStrings #-}
import Yesod
import Data.Text (Text)
import qualified Data.Text as T
data Args = Args
-- START
mkYesod "Args" [parseRoutes|
/person/#Text PersonR GET
/year/#Integer/month/#Text/day/#Int DateR
/wiki/*Texts WikiR GET
|]

getPersonR :: Text -&gt; Handler RepHtml
getPersonR name = defaultLayout [whamlet|&lt;h1&gt;Hello #{name}!|]

handleDateR :: Integer -&gt; Text -&gt; Int -&gt; Handler RepPlain -- text/plain
handleDateR year month day =
    return $ RepPlain $ toContent $
        T.concat [month, " ", T.pack $ show day, ", ", T.pack $ show year]

getWikiR :: [Text] -&gt; Handler RepPlain
getWikiR = return . RepPlain . toContent . T.unwords
-- STOP
instance Yesod Args
main = warpDebug 3000 Args
</codeblock><p id="83-arguments2">The arguments have the types of the dynamic pieces for each route, in the order specified. Also, notice how we are able to use both <codeph id="83-x2">RepHtml</codeph> and <codeph id="83-x3">RepPlain</codeph>.</p></conbody></concept></concept><concept id="the-ghandler-monad-84"><title>The Handler Monad</title><conbody><p id="84-ghandler1">The vast majority of code you write in Yesod sits in the <codeph id="84-x-3">Handler</codeph>
            monad. If you are approaching this from an MVC (Model-View-Controller) background, your
                <codeph id="84-x-4">Handler</codeph> code is the Controller. Some important points to know about
                <codeph id="84-x-5">Handler</codeph>:</p><ul id="84-x1">
            <li id="84-x2">It is an instance of <codeph id="84-x3">MonadIO</codeph>, so you can run any IO
                action in your handlers with <codeph id="84-x4">liftIO</codeph>. By the way, <codeph id="84-x5">liftIO</codeph> is exported by the <codeph id="84-x6">Yesod</codeph> module
                for your convenience.</li>
            <li id="84-x7">Like <codeph id="84-x-6">Widget</codeph>, <codeph id="84-x-7">Handler</codeph> is a
                fake-monad-transformer. It wraps around a <codeph id="84-x-8">ResourceT IO</codeph> monad. We
                discuss this type at length in the <xref id="84-x-9" href="conduits.dita#conduits-208" format="dita">conduits appendix</xref>, but for now, we'll just say it let's you
                safely allocate resources.</li>
            <li id="84-x-10">By "fake", I mean you can't use the standard <codeph id="84-x-11">lift</codeph> function
                provided by the <apiname id="84-x-12">transformers</apiname> package, you must use the
                Yesod-supplied one (just like with widgets).</li>
            <li id="84-x9"><codeph id="84-x-13">Handler</codeph> is just a type synonym around
                    <codeph id="84-x-14">GHandler</codeph>. <codeph id="84-x-15">GHandler</codeph> let's you specify exactly
                which subsite and master site you're using. The <codeph id="84-x-16">Handler</codeph> synonym
                says that the sub and master sites are your application's type.</li>
            <li id="84-x-17"><codeph id="84-x-18">Handler</codeph> provides a lot of different functionality, such as:<ul id="84-ul_sid_fwy_ze">
                    <li id="84-x-19">Providing request information.</li>
                    <li id="84-x-20">Keeping a list of the extra response headers you've added.</li>
                    <li id="84-x-21">Allowing you to modify the user's session.</li>
                    <li id="84-x-22">Short-circuiting responses, for redirecting, sending static files, or
                        reporting errors.</li>
                </ul></li>
        </ul><p id="84-ghandler2">The remainder of this chapter will give a brief introduction to some of the most
            common functions living in the <codeph id="84-x-23">Handler</codeph> monad. I am specifically <i id="84-x16">not</i> covering any of the session functions; that will be addressed in
            the <xref id="84-x17" href="sessions.dita#sessions-105">sessions chapter</xref>.</p></conbody><concept id="application-information-85"><title>Application Information</title><conbody><p id="85-ghandler3">There are a number of functions that return information about your application as a whole, and give no information about individual requests. Some of these are:</p><dl id="85-x1"><dlentry id="85-x2"><dt id="85-x3">getYesod</dt><dd id="85-x4">Returns your applicaton foundation value. If you store configuration values in your foundation, you will probably end up using this function a lot.</dd></dlentry><dlentry id="85-x5"><dt id="85-x6">getYesodSub</dt><dd id="85-x7">Get the subsite foundation value. Unless you are working in a subsite, this will return the same value as <codeph id="85-x8">getYesod</codeph>.</dd></dlentry><dlentry id="85-x9"><dt id="85-x10">getUrlRender</dt><dd id="85-x11">Returns the <term id="85-x12">URL rendering function</term>, which converts a type-safe
                    URL into a <codeph id="85-x13">Text</codeph>. Most of the time- like with Hamlet-
                    Yesod calls this function for you, but you may occassionally need to call it
                    directly.</dd></dlentry><dlentry id="85-x14"><dt id="85-x15">getUrlRenderParams</dt><dd id="85-x16">A variant of <codeph id="85-x17">getUrlRender</codeph> that converts both a type-safe URL and a list of query-string parameters. This function handles all percent-encoding necessary.</dd></dlentry></dl></conbody></concept><concept id="request-information-86"><title>Request Information</title><conbody><p id="86-ghandler4">The most common information you will want to get about the current request is the
            requested path, the query string parameters and POSTed form data. The first of those is
            dealt with in the routing, as described above. The other two are best dealt with using
            the <xref id="86-x-3" href="forms.dita#forms-90" format="dita">forms module</xref>.</p><p id="86-ghandler5">That said, you will sometimes need to get the data in a more raw format. For this purpose, Yesod exposes the <codeph id="86-x2">Request</codeph> datatype along with the <codeph id="86-x3">getRequest</codeph> function to retrieve it. This gives you access to the full list of GET parameters, cookies, and preferred languages. There are some convenient functions to make these lookups easier, such as <codeph id="86-x4">lookupGetParam</codeph>, <codeph id="86-x5">lookupCookie</codeph> and <codeph id="86-x6">languages</codeph>. For raw access to the POST parameters, you should use <codeph id="86-x7">runRequest</codeph>.</p><p id="86-ghandler6">If you need even more raw data, like request headers, you can use <codeph id="86-x8">waiRequest</codeph> to access the Web Application Interface (WAI) request value.
            See the <xref href="web-application-interface.dita#web-application-interface-242" format="dita">WAI appendix</xref> for more details.</p></conbody></concept><concept id="short-circuiting-87"><title>Short Circuiting</title><conbody><p id="87-ghandler7">The following functions immediately end execution of a handler function and return a result to the user.</p><dl id="87-x1"><dlentry id="87-x2"><dt id="87-x3">redirect</dt><dd id="87-x4">Sends a redirect response to the user (a 303 response). If you want to use a different
                    response code (e.g., a permanent 301 redirect), you can use
                        <codeph id="87-x-3">redirectWith</codeph>.<note id="87-x-4">Yesod uses a 303 response for HTTP/1.1
                        clients, and a 302 response for HTTP/1.0 clients. You can read up on this
                        sordid saga in the HTTP spec.</note></dd></dlentry><dlentry id="87-x7"><dt id="87-x8">notFound</dt><dd id="87-x9">Return a 404 response. This can be useful if a user requests a database value that doesn't exist.</dd></dlentry><dlentry id="87-x10"><dt id="87-x11">permissionDenied</dt><dd id="87-x12">Return a 403 response with a specific error message.</dd></dlentry><dlentry id="87-x13"><dt id="87-x14">invalidArgs</dt><dd id="87-x15">A 400 response with a list of invalid arguments.</dd></dlentry><dlentry id="87-x16"><dt id="87-x17">sendFile</dt><dd id="87-x18">Sends a file from the filesystem with a specified content type. This is the preferred way to send static files, since the underlying WAI handler may be able to optimize this to a <codeph id="87-x19">sendfile</codeph> system call. Using <codeph id="87-x20">readFile</codeph> for sending static files should not be necessary.</dd></dlentry><dlentry id="87-x21"><dt id="87-x22">sendResponse</dt><dd id="87-x23">Send a normal <codeph id="87-x-5">HasReps</codeph> response with a 200 status code. This is really
                    just a convenience for when you need to break out of some deeply nested code
                    with an immediate response.</dd></dlentry>
            <dlentry id="87-x-6">
                <dt id="87-x-7">sendWaiResponse</dt>
                <dd id="87-x-8">When you need to get low-level and send out a raw WAI response. This can be
                    especially useful for creating streaming responses or a technique like
                    server-sent events.</dd>
            </dlentry></dl></conbody></concept><concept id="response-headers-88"><title>Response Headers</title><conbody><dl id="88-x1"><dlentry id="88-x2"><dt id="88-x3">setCookie</dt><dd id="88-x4">Set a cookie on the client. Instead of taking an expiration date, this function takes a cookie duration in minutes. Remember, you won't see this cookie using <codeph id="88-x5">lookupCookie</codeph> until the <i id="88-x6">following</i> request.</dd></dlentry><dlentry id="88-x7"><dt id="88-x8">deleteCookie</dt><dd id="88-x9">Tells the client to remove a cookie. Once again, <codeph id="88-x10">lookupCookie</codeph> will not reflect this change until the next request.</dd></dlentry><dlentry id="88-x11"><dt id="88-x12">setHeader</dt><dd id="88-x13">Set an arbitrary response header.</dd></dlentry><dlentry id="88-x14"><dt id="88-x15">setLanguage</dt><dd id="88-x16">Set the preferred user language, which will show up in the result of the <codeph id="88-x17">languages</codeph> function.</dd></dlentry><dlentry id="88-x18"><dt id="88-x19">cacheSeconds</dt><dd id="88-x20">Set a Cache-Control header to indicate how many seconds this response can be cached. This can be particularly useful if you are using <xref id="88-x21" href="http://www.varnish-cache.org" scope="external" format="html">varnish on your server</xref>.</dd></dlentry><dlentry id="88-x22"><dt id="88-x23">neverExpires</dt><dd id="88-x24">Set the Expires header to the year 2037. You can use this with content which should never expire, such as when the request path has a hash value associated with it.</dd></dlentry><dlentry id="88-x25"><dt id="88-x26">alreadyExpired</dt><dd id="88-x27">Sets the Expires header to the past.</dd></dlentry><dlentry id="88-x28"><dt id="88-x29">expiresAt</dt><dd id="88-x30">Sets the Expires header to the specified date/time.</dd></dlentry></dl></conbody></concept></concept><concept id="summary-89"><title>Summary</title><conbody><p id="89-summary1">Routing and dispatch is arguably the core of Yesod: it is from here that our
            type-safe URLs are defined, and the majority of our code is written within the
                <codeph id="89-x-3">Handler</codeph> monad. This chapter covered some of the most important and
            central concepts of Yesod, so it is important that you properly digest it.</p><p id="89-summary2">This chapter also hinted at a number of more complex Yesod topics that we will be covering later. But you should be able to write some very sophisticated web applications with just the knowledge you have learned up until here.</p></conbody></concept></concept>