<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<section id="forms_forms">
<title>Forms</title>
<simpara>I&#8217;ve mentioned the boundary issue already: whenever data enters or leaves an
application, we need to validate it. Probably the most difficult place this
occurs is forms. Coding forms is complex; in an ideal world, we&#8217;d like a
solution that addresses the following problems:</simpara>
<itemizedlist>
<listitem>
<simpara>
Ensure data is valid.
</simpara>
</listitem>
<listitem>
<simpara>
Marshal string data in the form submission to Haskell datatypes.
</simpara>
</listitem>
<listitem>
<simpara>
Generate HTML code for displaying the form.
</simpara>
</listitem>
<listitem>
<simpara>
Generate Javascript to do clientside validation and provide more
  user-friendly widgets, such as date pickers.
</simpara>
</listitem>
<listitem>
<simpara>
Build up more complex forms by combining together simpler forms.
</simpara>
</listitem>
<listitem>
<simpara>
Automatically assign names to our fields that are guaranteed to be unique.
</simpara>
</listitem>
</itemizedlist>
<simpara>The yesod-form package provides all these features in a simple, declarative
API. It builds on top of Yesod&#8217;s widgets to simplify styling of forms and
applying Javascript appropriately. And like the rest of Yesod, it uses
Haskell&#8217;s type system to make sure everything is working correctly.</simpara>
<section id="forms_synopsis">
<title>Synopsis</title>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings     #-}
{-# LANGUAGE QuasiQuotes           #-}
{-# LANGUAGE TemplateHaskell       #-}
{-# LANGUAGE TypeFamilies          #-}
import           Control.Applicative ((&lt;$&gt;), (&lt;*&gt;))
import           Data.Text           (Text)
import           Data.Time           (Day)
import           Yesod
import           Yesod.Form.Jquery

data App = App

mkYesod "App" [parseRoutes|
/ HomeR GET
/person PersonR POST
|]

instance Yesod App

-- Tells our application to use the standard English messages.
-- If you want i18n, then you can supply a translating function instead.
instance RenderMessage App FormMessage where
    renderMessage _ _ = defaultFormMessage

-- And tell us where to find the jQuery libraries. We'll just use the defaults,
-- which point to the Google CDN.
instance YesodJquery App

-- The datatype we wish to receive from the form
data Person = Person
    { personName          :: Text
    , personBirthday      :: Day
    , personFavoriteColor :: Maybe Text
    , personEmail         :: Text
    , personWebsite       :: Maybe Text
    }
  deriving Show

-- Declare the form. The type signature is a bit intimidating, but here's the
-- overview:
--
-- * The Html parameter is used for encoding some extra information. See the
-- discussion regarding runFormGet and runFormPost below for further
-- explanation.
--
-- * We have our Handler as the inner monad, which indicates which site this is
-- running in.
--
-- * FormResult can be in three states: FormMissing (no data available),
-- FormFailure (invalid data) and FormSuccess
--
-- * The Widget is the viewable form to place into the web page.
--
-- Note that the scaffolded site provides a convenient Form type synonym,
-- so that our signature could be written as:
--
-- &gt; personForm :: Form Person
--
-- For our purposes, it's good to see the long version.
personForm :: Html -&gt; MForm Handler (FormResult Person, Widget)
personForm = renderDivs $ Person
    &lt;$&gt; areq textField "Name" Nothing
    &lt;*&gt; areq (jqueryDayField def
        { jdsChangeYear = True -- give a year dropdown
        , jdsYearRange = "1900:-5" -- 1900 till five years ago
        }) "Birthday" Nothing
    &lt;*&gt; aopt textField "Favorite color" Nothing
    &lt;*&gt; areq emailField "Email address" Nothing
    &lt;*&gt; aopt urlField "Website" Nothing

-- The GET handler displays the form
getHomeR :: Handler Html
getHomeR = do
    -- Generate the form to be displayed
    (widget, enctype) &lt;- generateFormPost personForm
    defaultLayout
        [whamlet|
            &lt;p&gt;
                The widget generated contains only the contents
                of the form, not the form tag itself. So...
            &lt;form method=post action=@{PersonR} enctype=#{enctype}&gt;
                ^{widget}
                &lt;p&gt;It also doesn't include the submit button.
                &lt;button&gt;Submit
        |]

-- The POST handler processes the form. If it is successful, it displays the
-- parsed person. Otherwise, it displays the form again with error messages.
postPersonR :: Handler Html
postPersonR = do
    ((result, widget), enctype) &lt;- runFormPost personForm
    case result of
        FormSuccess person -&gt; defaultLayout [whamlet|&lt;p&gt;#{show person}|]
        _ -&gt; defaultLayout
            [whamlet|
                &lt;p&gt;Invalid input, let's try again.
                &lt;form method=post action=@{PersonR} enctype=#{enctype}&gt;
                    ^{widget}
                    &lt;button&gt;Submit
            |]

main :: IO ()
main = warp 3000 App</programlisting>
</section>
<section id="forms_kinds_of_forms">
<title>Kinds of Forms</title>
<simpara>Before jumping into the types themselves, we should begin with an overview of
the different kinds of forms. There are three categories:</simpara>
<variablelist>
<varlistentry>
<term>
Applicative
</term>
<listitem>
<simpara>
These are the most commonly used (it&#8217;s what appeared in the
synopsis). Applicative gives us some nice properties of letting error messages
coalesce together and keep a very high-level, declarative approach. (For more
information on applicative code, see
<ulink url="http://www.haskell.org/haskellwiki/Applicative_functor">the Haskell
wiki</ulink>.)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Monadic
</term>
<listitem>
<simpara>
A more powerful alternative to applicative. While this allows you
more flexibility, it does so at the cost of being more verbose. Useful if you
want to create forms that don&#8217;t fit into the standard two-column look.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Input
</term>
<listitem>
<simpara>
Used only for receiving input. Does not generate any HTML for receiving
the user input. Useful for interacting with existing forms.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>In addition, there are a number of different variables that come into play for
each form and field you will want to set up:</simpara>
<itemizedlist>
<listitem>
<simpara>
Is the field required or optional?
</simpara>
</listitem>
<listitem>
<simpara>
Should it be submitted with GET or POST?
</simpara>
</listitem>
<listitem>
<simpara>
Does it have a default value, or not?
</simpara>
</listitem>
</itemizedlist>
<simpara>An overriding goal is to minimize the number of field definitions and let them
work in as many contexts as possible. One result of this is that we end up with
a few extra words for each field. In the synopsis, you may have noticed things
like <literal>areq</literal> and that extra <literal>Nothing</literal> parameter. We&#8217;ll cover why all of those
exist in the course of this chapter, but for now realize that by making these
parameters explicit, we are able to reuse the individuals fields (like
<literal>intField</literal>) in many different ways.</simpara>
<simpara>A quick note on naming conventions. Each form type has a one-letter prefix (A,
M and I) which is used in a few places, such as saying <literal>MForm</literal>. We also use req
and opt to mean required and optional. Combining these, we create a required
applicative field with <literal>areq</literal>, or an optional input field with <literal>iopt</literal>.</simpara>
</section>
<section id="forms_types">
<title>Types</title>
<simpara>The <literal>Yesod.Form.Types</literal> module declares a few types. We won&#8217;t cover all the types
available, but will instead focus on the most crucial. Let&#8217;s start with some of
the simple ones:</simpara>
<variablelist>
<varlistentry>
<term>
Enctype
</term>
<listitem>
<simpara>
The encoding type, either <literal>UrlEncoded</literal> or <literal>Multipart</literal>. This datatype
declares an instance of <literal>ToHtml</literal>, so you can use the enctype directly in
Hamlet.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
FormResult
</term>
<listitem>
<simpara>
Has one of three possible states: <literal>FormMissing</literal> if no data was
submitted, <literal>FormFailure</literal> if there was an error parsing the form (e.g., missing
a required field, invalid content), or <literal>FormSuccess</literal> if everything went
smoothly.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
FormMessage
</term>
<listitem>
<simpara>
Represents all of the different messages that can be generated as
a data type. For example, <literal>MsgInvalidInteger</literal> is used by the library to
indicate that the textual value provided is not an integer. By keeping this
data highly structured, you are able to provide any kind of rendering function
you want, which allows for internationalization (i18n) of your application.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Next we have some datatypes used for defining individual fields. We define a
field as a single piece of information, such as a number, a string, or an email
address. Fields are combined together to build forms.</simpara>
<variablelist>
<varlistentry>
<term>
Field
</term>
<listitem>
<simpara>
Defines two pieces of functionality: how to parse the text input from a
user into a Haskell value, and how to create the widget to be displayed to the
user. <literal>yesod-form</literal> defines a number of individual Fields in <literal>Yesod.Form.Fields</literal>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
FieldSettings
</term>
<listitem>
<simpara>
Basic information on how a field should be displayed, such as
the display name, an optional tooltip, and possibly hardcoded <literal>id</literal> and <literal>name</literal>
attributes. (If none are provided, they are automatically generated.) Note that
<literal>FieldSettings</literal> provides an <literal>IsString</literal> instance, so when you need to provide a
<literal>FieldSettings</literal> value, you can actually type in a literal string. That&#8217;s how we
interacted with it in the synopsis.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>And finally, we get to the important stuff: the forms themselves. There are
three types for this: <literal>MForm</literal> is for monadic forms, <literal>AForm</literal> for applicative and
<literal>FormInput</literal> for input. <literal>MForm</literal> is actually a type synonym for a
monad stack that provides the following features:</simpara>
<itemizedlist>
<listitem>
<simpara>
A <literal>Reader</literal> monad giving us the parameters submitted by the user, the
  foundation datatype and the list of languages the user supports. The last two
  are used for rendering of the <literal>FormMessage</literal>s to support i18n (more on this
  later).
</simpara>
</listitem>
<listitem>
<simpara>
A <literal>Writer</literal> monad keeping track of the <literal>Enctype</literal>. A form will always be
  <literal>UrlEncoded</literal>, unless there is a file input field, which will force us to use
  multipart instead.
</simpara>
</listitem>
<listitem>
<simpara>
A <literal>State</literal> monad keeping track of generated names and identifiers for fields.
</simpara>
</listitem>
</itemizedlist>
<simpara>An <literal>AForm</literal> is pretty similar. However, there are a few major differences:</simpara>
<itemizedlist>
<listitem>
<simpara>
It produces a list of <literal>FieldView</literal>s, which are used for tracking what we
  will display to the user. This allows us to keep an abstract idea of the form
  display, and then at the end of the day choose an appropriate function for
  laying it out on the page. In the synopsis, we used <literal>renderDivs</literal>, which
  creates a bunch of div tags. Two other options are <literal>renderBootstrap</literal> and
  <literal>renderTable</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
It does not provide a <literal>Monad</literal> instance. The goal of <literal>Applicative</literal> is to allow
  the entire form to run, grab as much information on each field as possible,
  and then create the final result. This cannot work in the context of <literal>Monad</literal>.
</simpara>
</listitem>
</itemizedlist>
<simpara>A <literal>FormInput</literal> is even simpler: it returns either a list of error messages or a
result.</simpara>
</section>
<section id="forms_converting">
<title>Converting</title>
<simpara>&#8220;But wait a minute,&#8221; you say. &#8220;You said the synopsis uses applicative forms,
but I&#8217;m sure the type signature said <literal>MForm</literal>. Shouldn&#8217;t it be Monadic?&#8221; That&#8217;s
true, the final form we produced was monadic. But what really happened is that
we converted an applicative form to a monadic one.</simpara>
<simpara>Again, our goal is to reuse code as much as possible, and minimize the number
of functions in the API. And Monadic forms are more powerful than Applicative,
if a bit clumsy, so anything that can be expressed in an Applicative form could
also be expressed in a Monadic form. There are two core functions that help out
with this: <literal>aformToForm</literal> converts any applicative form to a monadic one, and
<literal>formToAForm</literal> converts certain kinds of monadic forms to applicative forms.</simpara>
<simpara>&#8220;But wait <emphasis role="strong">another</emphasis> minute,&#8221; you insist. &#8220;I didn&#8217;t see any <literal>aformToForm</literal>!&#8221;
Also true. The <literal>renderDivs</literal> function takes care of that for us.</simpara>
</section>
<section id="forms_create_literal_aform_literal_s">
<title>Create <literal>AForm</literal>s</title>
<simpara>Now that I&#8217;ve (hopefully) convinced you that in our synopsis we were really
dealing with applicative forms, let&#8217;s have a look and try to understand how
these things get created. Let&#8217;s take a simple example:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">data Car = Car
    { carModel :: Text
    , carYear  :: Int
    }
  deriving Show

carAForm :: AForm Handler Car
carAForm = Car
    &lt;$&gt; areq textField "Model" Nothing
    &lt;*&gt; areq intField  "Year"  Nothing

carForm :: Html -&gt; MForm Handler (FormResult Car, Widget)
carForm = renderTable carAForm</programlisting>
<simpara>Here, we&#8217;ve explicitly split up applicative and monadic forms. In <literal>carAForm</literal>,
we use the <literal>&lt;$&gt;</literal> and <literal>&lt;*&gt;</literal> operators. This should not be surprising; these are
almost always used in applicative-style code. And we have one line for each
record in our <literal>Car</literal> datatype. Perhaps also unsurprisingly, we have a
<literal>textField</literal> for the <literal>Text</literal> record, and an <literal>intField</literal> for the <literal>Int</literal> record.</simpara>
<simpara>Let&#8217;s look a bit more closely at the <literal>areq</literal> function. Its (simplified) type
signature is <literal>Field a &#8594; FieldSettings &#8594; Maybe a &#8594; AForm a</literal>. That
first argument specifies the datatype of this field, how to parse
it, and how to render it. The next argument, <literal>FieldSettings</literal>, tells us the
label, tooltip, name and ID of the field. In this case, we&#8217;re using the
previously-mentioned <literal>IsString</literal> instance of <literal>FieldSettings</literal>.</simpara>
<simpara>And what&#8217;s up with that <literal>Maybe a</literal>? It provides the optional default value. For
example, if we want our form to fill in "2007" as the default car year, we
would use <literal>areq intField "Year" (Just 2007)</literal>. We can even take this to the next
level, and have a form that takes an optional parameter giving the default
values.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">carAForm :: Maybe Car -&gt; AForm Handler Car
carAForm mcar = Car
    &lt;$&gt; areq textField "Model" (carModel &lt;$&gt; mcar)
    &lt;*&gt; areq intField  "Year"  (carYear  &lt;$&gt; mcar)</programlisting>
<section id="forms_optional_fields">
<title>Optional fields</title>
<simpara>Suppose we wanted to have an optional field (like the car color). All we do
instead is use the <literal>aopt</literal> function.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">carAForm :: AForm Handler Car
carAForm = Car
    &lt;$&gt; areq textField "Model" Nothing
    &lt;*&gt; areq intField  "Year"  Nothing
    &lt;*&gt; aopt textField "Color" Nothing</programlisting>
<simpara>And like required fields, the last argument is the optional default value.
However, this has two layers of Maybe wrapping. This is actually a bit
redundant, but it makes it much easier to write code that takes an optional
default form parameter, such as in the next example.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">carAForm :: Maybe Car -&gt; AForm Handler Car
carAForm mcar = Car
    &lt;$&gt; areq textField "Model" (carModel &lt;$&gt; mcar)
    &lt;*&gt; areq intField  "Year"  (carYear  &lt;$&gt; mcar)
    &lt;*&gt; aopt textField "Color" (carColor &lt;$&gt; mcar)

carForm :: Html -&gt; MForm Handler (FormResult Car, Widget)
carForm = renderTable $ carAForm $ Just $ Car "Forte" 2010 $ Just "gray"</programlisting>
</section>
</section>
<section id="forms_validation">
<title>Validation</title>
<simpara>How would we make our form only accept cars created after 1990? If you
remember, we said above that the <literal>Field</literal> itself contained the information on
what is a valid entry. So all we need to do is write a new <literal>Field</literal>, right?
Well, that would be a bit tedious. Instead, let&#8217;s just modify an existing one:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">carAForm :: Maybe Car -&gt; AForm Handler Car
carAForm mcar = Car
    &lt;$&gt; areq textField    "Model" (carModel &lt;$&gt; mcar)
    &lt;*&gt; areq carYearField "Year"  (carYear  &lt;$&gt; mcar)
    &lt;*&gt; aopt textField    "Color" (carColor &lt;$&gt; mcar)
  where
    errorMessage :: Text
    errorMessage = "Your car is too old, get a new one!"

    carYearField = check validateYear intField

    validateYear y
        | y &lt; 1990  = Left errorMessage
        | otherwise = Right y</programlisting>
<simpara>The trick here is the <literal>check</literal> function. It takes a function (<literal>validateYear</literal>)
that returns either an error message or a modified field value. In this
example, we haven&#8217;t modified the value at all. That is usually going to be the
case. This kind of checking is very common, so we have a shortcut:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">carYearField = checkBool (&gt;= 1990) errorMessage intField</programlisting>
<simpara><literal>checkBool</literal> takes two parameters: a condition that must be fulfilled, and an
error message to be displayed if it was not.</simpara>
<note><simpara>You may have noticed the explicit <literal>Text</literal> type signature on
<literal>errorMessage</literal>. In the presence of <literal>OverloadedStrings</literal>, this is necessary. In
order to support i18n, messages can have many different datatypes, and GHC has
no way of determining which instance of <literal>IsString</literal> you intended to use.</simpara></note>
<simpara>It&#8217;s great to make sure the car isn&#8217;t too old. But what if we want to make sure
that the year specified is not from the future? In order to look up the current
year, we&#8217;ll need to run some <literal>IO</literal>. For such circumstances, we&#8217;ll need <literal>checkM</literal>,
which allows our validation code to perform arbitrary actions:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">    carYearField = checkM inPast $ checkBool (&gt;= 1990) errorMessage intField

    inPast y = do
        thisYear &lt;- liftIO getCurrentYear
        return $ if y &lt;= thisYear
            then Right y
            else Left ("You have a time machine!" :: Text)

getCurrentYear :: IO Int
getCurrentYear = do
    now &lt;- getCurrentTime
    let today = utctDay now
    let (year, _, _) = toGregorian today
    return $ fromInteger year</programlisting>
<simpara><literal>inPast</literal> is a function that will return an <literal>Either</literal> result in the <literal>Handler</literal>
monad. We use <literal>liftIO getCurrentYear</literal> to get the current year and then compare
it against the user-supplied year. Also, notice how we can chain together
multiple validators.</simpara>
<note><simpara>Since the <literal>checkM</literal> validator runs in the <literal>Handler</literal> monad, it has access
to a lot of the stuff you can normally do in Yesod. This is especially useful
for running database actions, which we&#8217;ll cover in the Persistent chapter.</simpara></note>
</section>
<section id="forms_more_sophisticated_fields">
<title>More sophisticated fields</title>
<simpara>Our color entry field is nice, but it&#8217;s not exactly user-friendly. What we
really want is a drop-down list.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">data Car = Car
    { carModel :: Text
    , carYear :: Int
    , carColor :: Maybe Color
    }
  deriving Show

data Color = Red | Blue | Gray | Black
    deriving (Show, Eq, Enum, Bounded)

carAForm :: Maybe Car -&gt; AForm Handler Car
carAForm mcar = Car
    &lt;$&gt; areq textField                "Model" (carModel &lt;$&gt; mcar)
    &lt;*&gt; areq carYearField             "Year"  (carYear  &lt;$&gt; mcar)
    &lt;*&gt; aopt (selectFieldList colors) "Color" (carColor &lt;$&gt; mcar)
  where
    colors :: [(Text, Color)]
    colors = [("Red", Red), ("Blue", Blue), ("Gray", Gray), ("Black", Black)]</programlisting>
<simpara><literal>selectFieldList</literal> takes a list of pairs. The first item in the pair is the text displayed to the user in the drop-down list, and the second item is the actual Haskell value. Of course, the code above looks really repetitive; we can get the same result using the Enum and Bounded instance GHC automatically derives for us.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">colors = map (pack . show &amp;&amp;&amp; id) [minBound..maxBound]</programlisting>
<simpara><literal>[minBound..maxBound]</literal> gives us a list of all the different <literal>Color</literal> values. We
then apply a <literal>map</literal> and <literal>&amp;&amp;&amp;</literal> (a.k.a, the fan-out operator) to turn that into a
list of pairs. And even this can be simplified by using the <literal>optionsEnum</literal>
function provided by yesod-form, which would turn our original code into:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">carAForm :: Maybe Car -&gt; AForm Handler Car
carAForm mcar = Car
    &lt;$&gt; areq textField                 "Model" (carModel &lt;$&gt; mcar)
    &lt;*&gt; areq carYearField              "Year"  (carYear  &lt;$&gt; mcar)
    &lt;*&gt; aopt (selectField optionsEnum) "Color" (carColor &lt;$&gt; mcar)</programlisting>
<simpara>Some people prefer radio buttons to drop-down lists. Fortunately, this is just a one-word change.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">carAForm = Car
    &lt;$&gt; areq textField                "Model" Nothing
    &lt;*&gt; areq intField                 "Year"  Nothing
    &lt;*&gt; aopt (radioField optionsEnum) "Color" Nothing</programlisting>
</section>
<section id="forms_running_forms">
<title>Running forms</title>
<simpara>At some point, we&#8217;re going to need to take our beautiful forms and produce some
results. There are a number of different functions available for this, each
with its own purpose. I&#8217;ll go through them, starting with the most common.</simpara>
<variablelist>
<varlistentry>
<term>
runFormPost
</term>
<listitem>
<simpara>
This will run your form against any submitted <literal>POST</literal> parameters.
If this is not a <literal>POST</literal> submission, it will return a <literal>FormMissing</literal>. This
automatically inserts a security token as a hidden form field to avoid
<ulink url="http://en.wikipedia.org/wiki/Cross-site_request_forgery">cross-site request
forgery</ulink> (CSRF) attacks.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
runFormGet
</term>
<listitem>
<simpara>
The equivalent of <literal>runFormPost</literal> for GET parameters. In order to
distinguish a normal <literal>GET</literal> page load from a <literal>GET</literal> submission, it includes an
extra <literal>_hasdata</literal> hidden field in the form. Unlike runFormPost, it does
not include CSRF protection.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
runFormPostNoToken
</term>
<listitem>
<simpara>
Same as <literal>runFormPost</literal>, but does not include (or require)
the CSRF security token.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
generateFormPost
</term>
<listitem>
<simpara>
Instead of binding to existing <literal>POST</literal> parameters, acts as if
there are none. This can be useful when you want to generate a new form after a
previous form was submitted, such as in a wizard.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
generateFormGet
</term>
<listitem>
<simpara>
Same as <literal>generateFormPost</literal>, but for <literal>GET</literal>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>The return type from the first three is <literal>((FormResult a, Widget), Enctype)</literal>.
The <literal>Widget</literal> will already have any validation errors and previously submitted
values.</simpara>
<note><simpara>Why the nested tuple instead of a specialized datatype? It&#8217;s because
<literal>runFormPostNoToken</literal> and <literal>runFormGet</literal> can both be used with forms that don&#8217;t
return a <literal>FormResult</literal> or <literal>Widget</literal>, which can be useful when dealing with more
complicated monadic forms (discussed below).</simpara></note>
</section>
<section id="forms_i18n">
<title>i18n</title>
<simpara>There have been a few references to i18n in this chapter. The topic will get
more thorough coverage in its own chapter, but since it has such a profound
effect on <literal>yesod-form</literal>, I wanted to give a brief overview. The idea behind i18n
in Yesod is to have data types represent messages. Each site can have an
instance of <literal>RenderMessage</literal> for a given datatype which will translate that
message based on a list of languages the user accepts. As a result of all this,
there are a few things you should be aware of:</simpara>
<itemizedlist>
<listitem>
<simpara>
There is an automatic instance of <literal>RenderMessage</literal> for <literal>Text</literal> in every site,
  so you can just use plain strings if you don&#8217;t care about i18n support.
  However, you may need to use explicit type signatures occasionally.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>yesod-form</literal> expresses all of its messages in terms of the <literal>FormMessage</literal> datatype. Therefore, to use <literal>yesod-form</literal>, you&#8217;ll need to have an appropriate <literal>RenderMessage</literal> instance. A simple one that uses the default English translations would be:
</simpara>
</listitem>
</itemizedlist>
<programlisting language="haskell" linenumbering="unnumbered">instance RenderMessage App FormMessage where
    renderMessage _ _ = defaultFormMessage</programlisting>
<simpara>This is provided automatically by the scaffolded site.</simpara>
</section>
<section id="forms_monadic_forms">
<title>Monadic Forms</title>
<simpara>Often times, a simple form layout is adequate, and applicative forms excel at
this approach. Sometimes, however, you&#8217;ll want to have a more customized look
to your form.</simpara>
<figure id="monadic-x-4"><title>A non-standard form layout</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/monadic-form.png"/>
  </imageobject>
  <textobject><phrase>images/monadic-form.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>For these use cases, monadic forms fit the bill. They are a bit more verbose
than their applicative cousins, but this verbosity allows you to have complete
control over what the form will look like. In order to generate the form above,
we could code something like this.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings     #-}
{-# LANGUAGE QuasiQuotes           #-}
{-# LANGUAGE TemplateHaskell       #-}
{-# LANGUAGE TypeFamilies          #-}
import           Control.Applicative
import           Data.Text           (Text)
import           Yesod

data App = App

mkYesod "App" [parseRoutes|
/ HomeR GET
|]

instance Yesod App

instance RenderMessage App FormMessage where
    renderMessage _ _ = defaultFormMessage

data Person = Person
    { personName :: Text
    , personAge  :: Int
    }
    deriving Show

personForm :: Html -&gt; MForm Handler (FormResult Person, Widget)
personForm extra = do
    (nameRes, nameView) &lt;- mreq textField "this is not used" Nothing
    (ageRes, ageView) &lt;- mreq intField "neither is this" Nothing
    let personRes = Person &lt;$&gt; nameRes &lt;*&gt; ageRes
    let widget = do
            toWidget
                [lucius|
                    ##{fvId ageView} {
                        width: 3em;
                    }
                |]
            [whamlet|
                #{extra}
                &lt;p&gt;
                    Hello, my name is #
                    ^{fvInput nameView}
                    \ and I am #
                    ^{fvInput ageView}
                    \ years old. #
                    &lt;input type=submit value="Introduce myself"&gt;
            |]
    return (personRes, widget)

getHomeR :: Handler Html
getHomeR = do
    ((res, widget), enctype) &lt;- runFormGet personForm
    defaultLayout
        [whamlet|
            &lt;p&gt;Result: #{show res}
            &lt;form enctype=#{enctype}&gt;
                ^{widget}
        |]

main :: IO ()
main = warp 3000 App</programlisting>
<simpara>Similar to the applicative <literal>areq</literal>, we use <literal>mreq</literal> for monadic forms. (And yes,
there&#8217;s also <literal>mopt</literal> for optional fields.) But there&#8217;s a big difference: <literal>mreq</literal>
gives us back a pair of values. Instead of hiding away the FieldView value and
automatically inserting it into a widget, we have the ability to insert it as
we see fit.</simpara>
<simpara><literal>FieldView</literal> has a number of pieces of information. The most important is
<literal>fvInput</literal>, which is the actual form field. In this example, we also use <literal>fvId</literal>,
which gives us back the HTML <literal>id</literal> attribute of the input tag. In our example,
we use that to specify the width of the field.</simpara>
<simpara>You might be wondering what the story is with the &#8220;this is not used&#8221; and
&#8220;neither is this&#8221; values. <literal>mreq</literal> takes a <literal>FieldSettings</literal> as its second
argument. Since <literal>FieldSettings</literal> provides an <literal>IsString</literal> instance, the strings
are essentially expanded by the compiler to:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">fromString "this is not used" == FieldSettings
    { fsLabel = "this is not used"
    , fsTooltip = Nothing
    , fsId = Nothing
    , fsName = Nothing
    , fsAttrs = []
    }</programlisting>
<simpara>In the case of applicative forms, the <literal>fsLabel</literal> and <literal>fsTooltip</literal> values are used
when constructing your HTML. In the case of monadic forms, Yesod does not
generate any of the &#8220;wrapper&#8221; HTML for you, and therefore these values are
ignored. However, we still keep the <literal>FieldSettings</literal> parameter to allow you to
override the <literal>id</literal> and <literal>name</literal> attributes of your fields if desired.</simpara>
<simpara>The other interesting bit is the <literal>extra</literal> value. <literal>GET</literal> forms include an extra
field to indicate that they have been submitted, and <literal>POST</literal> forms include a
security token to prevent CSRF attacks. If you don&#8217;t include this extra hidden
field in your form, the form submission will fail.</simpara>
<simpara>Other than that, things are pretty straight-forward. We create our <literal>personRes</literal>
value by combining together the <literal>nameRes</literal> and <literal>ageRes</literal> values, and then return
a tuple of the person and the widget. And in the <literal>getHomeR</literal> function,
everything looks just like an applicative form. In fact, you could swap out our
monadic form with an applicative one and the code would still work.</simpara>
</section>
<section id="forms_input_forms">
<title>Input forms</title>
<simpara>Applicative and monadic forms handle both the generation of your HTML code and
the parsing of user input. Sometimes, you only want to do the latter, such as
when there&#8217;s an already-existing form in HTML somewhere, or if you want to
generate a form dynamically using Javascript. In such a case, you&#8217;ll want input
forms.</simpara>
<simpara>These work mostly the same as applicative and monadic forms, with some differences:</simpara>
<itemizedlist>
<listitem>
<simpara>
You use <literal>runInputPost</literal> and <literal>runInputGet</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
You use <literal>ireq</literal> and <literal>iopt</literal>. These functions now only take two arguments: the
  field type and the name (i.e., HTML <literal>name</literal> attribute) of the field in
  question.
</simpara>
</listitem>
<listitem>
<simpara>
After running a form, it returns the value. It doesn&#8217;t return a widget or an
  encoding type.
</simpara>
</listitem>
<listitem>
<simpara>
If there are any validation errors, the page returns an "invalid arguments"
  error page.
</simpara>
</listitem>
</itemizedlist>
<simpara>You can use input forms to recreate the previous example. Note, however, that
the input version is less user friendly. If you make a mistake in an
applicative or monadic form, you will be brought back to the same page, with
your previously entered values in the form, and an error message explaining what
you need to correct. With input forms, the user simply gets an error message.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings     #-}
{-# LANGUAGE QuasiQuotes           #-}
{-# LANGUAGE TemplateHaskell       #-}
{-# LANGUAGE TypeFamilies          #-}
import           Control.Applicative
import           Data.Text           (Text)
import           Yesod

data App = App

mkYesod "App" [parseRoutes|
/ HomeR GET
/input InputR GET
|]

instance Yesod App

instance RenderMessage App FormMessage where
    renderMessage _ _ = defaultFormMessage

data Person = Person
    { personName :: Text
    , personAge  :: Int
    }
    deriving Show

getHomeR :: Handler Html
getHomeR = defaultLayout
    [whamlet|
        &lt;form action=@{InputR}&gt;
            &lt;p&gt;
                My name is
                &lt;input type=text name=name&gt;
                and I am
                &lt;input type=text name=age&gt;
                years old.
                &lt;input type=submit value="Introduce myself"&gt;
    |]

getInputR :: Handler Html
getInputR = do
    person &lt;- runInputGet $ Person
                &lt;$&gt; ireq textField "name"
                &lt;*&gt; ireq intField "age"
    defaultLayout [whamlet|&lt;p&gt;#{show person}|]

main :: IO ()
main = warp 3000 App</programlisting>
</section>
<section id="forms_custom_fields">
<title>Custom fields</title>
<simpara>The fields that come built-in with Yesod will likely cover the vast majority of
your form needs. But occasionally, you&#8217;ll need something more specialized.
Fortunately, you can create new fields in Yesod yourself. The <literal>Field</literal> constructor
has three values: <literal>fieldParse</literal> takes a list of values submitted by the user and
returns one of three results:</simpara>
<itemizedlist>
<listitem>
<simpara>
An error message saying validation failed.
</simpara>
</listitem>
<listitem>
<simpara>
The parsed value.
</simpara>
</listitem>
<listitem>
<simpara>
Nothing, indicating that no data was supplied.
</simpara>
</listitem>
</itemizedlist>
<simpara>That last case might sound surprising. It would seem that Yesod can
automatically know that no information is supplied when the input list is
empty. But in reality, for some field types, the lack of any input is actually
valid input. Checkboxes, for instance, indicate an unchecked state by sending
in an empty list.</simpara>
<simpara>Also, what&#8217;s up with the list? Shouldn&#8217;t it be a <literal>Maybe</literal>? That&#8217;s also not the
case. With grouped checkboxes and multi-select lists, you&#8217;ll have multiple
widgets with the same name. We also use this trick in our example below.</simpara>
<simpara>The second value in the constructor is <literal>fieldView</literal>, and it renders a widget to display to the
user. This function has the following arguments:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
The <literal>id</literal> attribute.
</simpara>
</listitem>
<listitem>
<simpara>
The <literal>name</literal> attribute.
</simpara>
</listitem>
<listitem>
<simpara>
Any other arbitrary attributes.
</simpara>
</listitem>
<listitem>
<simpara>
The result, given as an <literal>Either</literal> value. This will provide either the unparsed
input (when parsing failed) or the successfully parsed value. <literal>intField</literal> is a
great example of how this works. If you type in <emphasis role="strong"><literal>42</literal></emphasis>, the value of result
will be <literal>Right 42</literal>. But if you type in <emphasis role="strong"><literal>turtle</literal></emphasis>, the result will be <literal>Left
"turtle"</literal>. This lets you put in a value attribute on your input tag that will
give the user a consistent experience.
</simpara>
</listitem>
<listitem>
<simpara>
A <literal>Bool</literal> indicating if the field is required.
</simpara>
</listitem>
</orderedlist>
<simpara>The final value in the constructor is <literal>fieldEnctype</literal>. If you&#8217;re dealing with
file uploads, this should be <literal>Multipart</literal>; otherwise, it should be <literal>UrlEncoded</literal>.</simpara>
<simpara>As a small example, let&#8217;s create a new field type that is a password confirm
field. This field has two text inputs- both with the same name attribute- and
returns an error message if the values don&#8217;t match. Note that, unlike most
fields, it does <emphasis>not</emphasis> provide a value attribute on the input tags, as you don&#8217;t
want to send back a user-entered password in your HTML <emphasis role="strong">ever</emphasis>.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">passwordConfirmField :: Field Handler Text
passwordConfirmField = Field
    { fieldParse = \rawVals _fileVals -&gt;
        case rawVals of
            [a, b]
                | a == b -&gt; return $ Right $ Just a
                | otherwise -&gt; return $ Left "Passwords don't match"
            [] -&gt; return $ Right Nothing
            _ -&gt; return $ Left "You must enter two values"
    , fieldView = \idAttr nameAttr otherAttrs eResult isReq -&gt;
        [whamlet|
            &lt;input id=#{idAttr} name=#{nameAttr} *{otherAttrs} type=password&gt;
            &lt;div&gt;Confirm:
            &lt;input id=#{idAttr}-confirm name=#{nameAttr} *{otherAttrs} type=password&gt;
        |]
    , fieldEnctype = UrlEncoded
    }

getHomeR :: Handler Html
getHomeR = do
    ((res, widget), enctype) &lt;- runFormGet $ renderDivs
        $ areq passwordConfirmField "Password" Nothing
    defaultLayout
        [whamlet|
            &lt;p&gt;Result: #{show res}
            &lt;form enctype=#{enctype}&gt;
                ^{widget}
                &lt;input type=submit value="Change password"&gt;
        |]</programlisting>
</section>
<section id="forms_values_that_don_8217_t_come_from_the_user">
<title>Values that don&#8217;t come from the user</title>
<simpara>Imagine you&#8217;re writing a blog hosting web app, and you want to have a form for
users to enter a blog post. A blog post will consist of four pieces of
information:</simpara>
<itemizedlist>
<listitem>
<simpara>
Title
</simpara>
</listitem>
<listitem>
<simpara>
HTML contents
</simpara>
</listitem>
<listitem>
<simpara>
User ID of the author
</simpara>
</listitem>
<listitem>
<simpara>
Publication date
</simpara>
</listitem>
</itemizedlist>
<simpara>We want the user to enter the first two values, but not the second two. User ID
should be determined automatically by authenticating the user (a topic we
haven&#8217;t covered yet), and the publication date should just be the current time.
The question is, how do we keep our simple applicative form syntax, and yet
pull in values that don&#8217;t come from the user?</simpara>
<simpara>The answer is two separate helper functions:</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>pure</literal> allows us to wrap up a plain value as an applicative form value.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>lift</literal> allows us to run arbitrary <literal>Handler</literal> actions inside an applicative form.
</simpara>
</listitem>
</itemizedlist>
<simpara>Let&#8217;s see an example of using these two functions:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings     #-}
{-# LANGUAGE QuasiQuotes           #-}
{-# LANGUAGE TemplateHaskell       #-}
{-# LANGUAGE TypeFamilies          #-}
import           Control.Applicative
import           Data.Text           (Text)
import           Data.Time
import           Yesod

-- In the authentication chapter, we'll address this properly
newtype UserId = UserId Int
    deriving Show

data App = App

mkYesod "App" [parseRoutes|
/ HomeR GET POST
|]

instance Yesod App

instance RenderMessage App FormMessage where
    renderMessage _ _ = defaultFormMessage

type Form a = Html -&gt; MForm Handler (FormResult a, Widget)

data Blog = Blog
    { blogTitle    :: Text
    , blogContents :: Textarea
    , blogUser     :: UserId
    , blogPosted   :: UTCTime
    }
    deriving Show

form :: UserId -&gt; Form Blog
form userId = renderDivs $ Blog
    &lt;$&gt; areq textField "Title" Nothing
    &lt;*&gt; areq textareaField "Contents" Nothing
    &lt;*&gt; pure userId
    &lt;*&gt; lift (liftIO getCurrentTime)

getHomeR :: Handler Html
getHomeR = do
    let userId = UserId 5 -- again, see the authentication chapter
    ((res, widget), enctype) &lt;- runFormPost $ form userId
    defaultLayout
        [whamlet|
            &lt;p&gt;Previous result: #{show res}
            &lt;form method=post action=@{HomeR} enctype=#{enctype}&gt;
                ^{widget}
                &lt;input type=submit&gt;
        |]

postHomeR :: Handler Html
postHomeR = getHomeR

main :: IO ()
main = warp 3000 App</programlisting>
<simpara>One trick we&#8217;ve introduced here is using the same handler code for both the
<literal>GET</literal> and <literal>POST</literal> request methods. This is enabled by the implementation of
<literal>runFormPost</literal>, which will behave exactly like <literal>generateFormPost</literal> in the case of
a <literal>GET</literal> request. Using the same handler for both request methods cuts down on
some boilerplate.</simpara>
</section>
<section id="forms_summary">
<title>Summary</title>
<simpara>Forms in Yesod are broken up into three groups. Applicative is the most common,
as it provides a nice user interface with an easy-to-use API. Monadic forms
give you more power, but are harder to use. Input forms are intended when you
just want to read data from the user, not generate the input widgets.</simpara>
<simpara>There are a number of different <literal>Field</literal>s provided by Yesod out-of-the-box. In
order to use these in your forms, you need to indicate the kind of form and
whether the field is required or optional. The result is six helper functions:
<literal>areq</literal>, <literal>aopt</literal>, <literal>mreq</literal>, <literal>mopt</literal>, <literal>ireq</literal>, and <literal>iopt</literal>.</simpara>
<simpara>Forms have significant power available. They can automatically insert
Javascript to help you leverage nicer UI controls, such as a jQuery UI date
picker. Forms are also fully i18n-ready, so you can support a global community
of users. And when you have more specific needs, you can slap on some
validation functions to an existing field, or write a new one from scratch.</simpara>
</section>
</section>
</article>
