<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<section id="shakespearean-templates_shakespearean_templates">
<title>Shakespearean Templates</title>
<simpara>Yesod uses the Shakespearean family of template languages as its standard
approach to HTML, CSS and JavaScript creation. This language family shares some
common syntax, as well as overarching principles:</simpara>
<itemizedlist>
<listitem>
<simpara>
As little interference to the underlying language as possible, while
providing conveniences where unobtrusive.
</simpara>
</listitem>
<listitem>
<simpara>
Compile-time guarantees on well-formed content.
</simpara>
</listitem>
<listitem>
<simpara>
Static type safety, greatly helping the prevention of
  <ulink url="http://en.wikipedia.org/wiki/Cross-site_scripting">XSS (cross-site
  scripting)</ulink> attacks.
</simpara>
</listitem>
<listitem>
<simpara>
Automatic validation of interpolated links, whenever possible, through type-safe
  URLs.
</simpara>
</listitem>
</itemizedlist>
<simpara>There is nothing inherently tying Yesod to these languages, or the other way
around: each can be used independently of the other. This chapter will address
these template languages on their own, while the remainder of the book will use
them to enhance Yesod application development.</simpara>
<section id="shakespearean-templates_synopsis">
<title>Synopsis</title>
<simpara>There are four main languages at play: Hamlet is an HTML templating language,
Julius is for Javascript, and Cassius and Lucius are both for CSS. Hamlet and
Cassius are both whitespace-sensitive formats, using indentation to denote
nesting. By contrast, Lucius is a superset of CSS, keeping CSS&#8217;s braces for
denoting nesting. Julius is a simple passthrough language for producing
JavaScript; the only added feature is variable interpolation.</simpara>
<note><simpara>Cassius is in fact just an alternate syntax for Lucius. They both use the
same processing engine underneath, but Cassius files have indentation converted
into braces before processing. The choice between the two is purely one of
syntactical preference.</simpara></note>
<section id="shakespearean-templates_hamlet_html">
<title>Hamlet (HTML)</title>
<programlisting language="hamlet" linenumbering="unnumbered">$doctype 5
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;#{pageTitle} - My Site
        &lt;link rel=stylesheet href=@{Stylesheet}&gt;
    &lt;body&gt;
        &lt;h1 .page-title&gt;#{pageTitle}
        &lt;p&gt;Here is a list of your friends:
        $if null friends
            &lt;p&gt;Sorry, I lied, you don't have any friends.
        $else
            &lt;ul&gt;
                $forall Friend name age &lt;- friends
                    &lt;li&gt;#{name} (#{age} years old)
        &lt;footer&gt;^{copyright}</programlisting>
</section>
<section id="shakespearean-templates_lucius_css">
<title>Lucius (CSS)</title>
<programlisting language="lucius" linenumbering="unnumbered">section.blog {
    padding: 1em;
    border: 1px solid #000;
    h1 {
        color: #{headingColor};
        background-image: url(@{MyBackgroundR});
    }
}</programlisting>
</section>
<section id="shakespearean-templates_cassius_css">
<title>Cassius (CSS)</title>
<simpara>The following is equivalent to the Lucius example above.</simpara>
<programlisting language="cassius" linenumbering="unnumbered">section.blog
    padding: 1em
    border: 1px solid #000
    h1
        color: #{headingColor}
        background-image: url(@{MyBackgroundR})</programlisting>
</section>
<section id="shakespearean-templates_julius_javascript">
<title>Julius (JavaScript)</title>
<simpara>String interpolation works slightly differently in Julius. This is important
from a security standpoint â€” all interpolated values are valid JSON by default
which helps prevent XSS attacks. You&#8217;ll need to use the <literal>rawJS</literal> function to get
a string that isn&#8217;t wrapped in double-quotes.</simpara>
<simpara>Be sure not to use <literal>rawJS</literal> with any input you don&#8217;t trust, <emphasis>e.g.</emphasis>, anything
submitted by a user.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">-- import the rawJS function by importing its typeclass
import Text.Julius (RawJS (..))</programlisting>
<programlisting language="julius" linenumbering="unnumbered">$(function(){
    $("section.#{rawJS sectionClass}").hide();
    $("#mybutton").click(function(){document.location = "@{SomeRouteR}";});
    ^{addBling}
});</programlisting>
</section>
</section>
<section id="shakespearean-templates_types">
<title>Types</title>
<simpara>Before we jump into syntax, let&#8217;s take a look at the various types involved. We
mentioned in the introduction that types help protect us from XSS attacks. For
example, let&#8217;s say that we have an HTML template that should display someone&#8217;s
name. It might look like this:</simpara>
<programlisting language="hamlet" linenumbering="unnumbered">&lt;p&gt;Hello, my name is #{name}</programlisting>
<note><simpara><literal>#{&#8230;}</literal> is how we do variable interpolation in Shakespeare.</simpara></note>
<simpara>What should happen to <literal>name</literal>, and what should its datatype be? A naive approach
would be to use a <literal>Text</literal> value, and insert it verbatim. But that would give us
quite a problem when <literal>name</literal> is equal to something like:</simpara>
<screen>&lt;script src='http://nefarious.com/evil.js'&gt;&lt;/script&gt;</screen>
<simpara>What we want is to be able to entity-encode the name, so that <literal>&lt;</literal> becomes <literal>&amp;lt;</literal>.</simpara>
<simpara>An equally naive approach is to simply entity-encode <emphasis role="strong">every</emphasis> piece of text that
gets embedded. What happens when you have some preexisting HTML generated from
another process? For example, on the Yesod website, all Haskell code snippets
are run through a colorizing function that wraps up words in appropriate <literal>span</literal>
tags. If we entity escaped everything, code snippets would be completely
unreadable!</simpara>
<simpara>Instead, we have an <literal>Html</literal> datatype. In order to generate an <literal>Html</literal> value, we
have two options for APIs: the <literal>ToMarkup</literal> typeclass provides a way to convert
<literal>String</literal> and <literal>Text</literal> values into <literal>Html</literal>, via its <literal>toHtml</literal> function,
automatically escaping entities along the way. This would be the approach we&#8217;d
want for the name above. For the code snippet example, we would use the
<literal>preEscapedToMarkup</literal> function.</simpara>
<simpara>When you use variable interpolation in Hamlet (the HTML Shakespeare language),
it automatically applies a <literal>toHtml</literal> call to the value inside. So if you
interpolate a <literal>String</literal>, it will be entity-escaped. But if you provide an <literal>Html</literal>
value, it will appear unmodified. In the code snippet example, we might
interpolate with something like <literal>#{preEscapedToMarkup myHaskellHtml}</literal>.</simpara>
<note><simpara>The <literal>Html</literal> datatype, as well as the functions mentioned, are all provided
by the blaze-html package. This allows Hamlet to interact with all other
blaze-html packages, and lets Hamlet provide a general solution for producing
blaze-html values. Also, we get to take advantage of blaze-html&#8217;s amazing
performance.</simpara></note>
<simpara>Similarly, we have <literal>Css</literal>/<literal>ToCss</literal>, as well as <literal>Javascript</literal>/<literal>ToJavascript</literal>. These
provide some compile-time sanity checks that we haven&#8217;t accidentally stuck some
HTML in our CSS.</simpara>
<note>
<simpara>One other advantage on the CSS side is some helper datatypes for colors and units. For example:</simpara>
<programlisting language="lucius" linenumbering="unnumbered">.red { color: #{colorRed} }</programlisting>
<simpara>Please see the Haddock documentation for more details.</simpara>
</note>
<section id="shakespearean-templates_type_safe_urls">
<title>Type-safe URLs</title>
<simpara>Possibly the most unique feature in Yesod is type-safe URLs, and the ability to
use them conveniently is provided directly by Shakespeare. Usage is nearly
identical to variable interpolation; we just use the at-sign (@) instead of the
hash (#). We&#8217;ll cover the syntax later; first, let&#8217;s clarify the intuition.</simpara>
<simpara>Suppose we have an application with two routes:
<emphasis>http://example.com/profile/home</emphasis> is the homepage, and
<emphasis>http://example.com/display/time</emphasis> displays the current time. And let&#8217;s say we
want to link from the homepage to the time. I can think of three different ways
of constructing the URL:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
As a relative link: <emphasis>../display/time</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
As an absolute link, without a domain: <emphasis>/display/time</emphasis>
</simpara>
</listitem>
<listitem>
<simpara>
As an absolute link, with a domain: <emphasis>http://example.com/display/time</emphasis>
</simpara>
</listitem>
</orderedlist>
<simpara>There are problems with each approach: the first will break if either URL
changes. Also, it&#8217;s not suitable for all use cases; RSS and Atom feeds, for
instance, require absolute URLs. The second is more resilient to change than
the first, but still won&#8217;t be acceptable for RSS and Atom. And while the third
works fine for all use cases, you&#8217;ll need to update every single URL in your
application whenever your domain name changes. You think that doesn&#8217;t happen
often? Just wait till you move from your development to staging and finally
production server.</simpara>
<simpara>But more importantly, there is one huge problem with all approaches: if you
change your routes at all, the compiler won&#8217;t warn you about the broken links.
Not to mention that typos can wreak havoc as well.</simpara>
<simpara>The goal of type-safe URLs is to let the compiler check things for us as much
as possible. In order to facilitate this, our first step must be to move away
from plain old text, which the compiler doesn&#8217;t understand, to some well
defined datatypes. For our simple application, let&#8217;s model our routes with a
sum type:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">data MyRoute = Home | Time</programlisting>
<simpara>Instead of placing a link like /display/time in our template, we can use the
<literal>Time</literal> constructor. But at the end of the day, HTML is made up of text, not
data types, so we need some way to convert these values to text. We call this a
URL rendering function, and a simple one is:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">renderMyRoute :: MyRoute -&gt; Text
renderMyRoute Home = "http://example.com/profile/home"
renderMyRoute Time = "http://example.com/display/time"</programlisting>
<note>
<simpara>URL rendering functions are actually a bit more complicated than this. They
need to address query string parameters, handle records within the constructor,
and more intelligently handle the domain name. But in practice, you don&#8217;t need
to worry about this, since Yesod will automatically create your render
functions. The one thing to point out is that the type signature is actually a
little more complicated to handle query strings:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">type Query = [(Text, Text)]
type Render url = url -&gt; Query -&gt; Text
renderMyRoute :: Render MyRoute
renderMyRoute Home _ = ...
renderMyRoute Time _ = ...</programlisting>
</note>
<simpara>OK, we have our render function, and we have type-safe URLs embedded in the
templates. How does this fit together exactly? Instead of generating an <literal>Html</literal>
(or <literal>Css</literal> or <literal>Javascript</literal>) value directly, Shakespearean templates actually
produce a function, which takes this render function and produces HTML. To see
this better, let&#8217;s have a quick (fake) peek at how Hamlet would work under the
surface. Supposing we had a template:</simpara>
<programlisting language="hamlet" linenumbering="unnumbered">&lt;a href=@{Time}&gt;The time</programlisting>
<simpara>this would translate roughly into the Haskell code:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">\render -&gt; mconcat ["&lt;a href='", render Time, "'&gt;The time&lt;/a&gt;"]</programlisting>
</section>
</section>
<section id="shakespearean-templates_syntax">
<title>Syntax</title>
<simpara>All Shakespearean languages share the same interpolation syntax, and are able
to utilize type-safe URLs. They differ in the syntax specific for their target
language (HTML, CSS, or JavaScript). Let&#8217;s explore each language in turn.</simpara>
<section id="shakespearean-templates_hamlet_syntax">
<title>Hamlet Syntax</title>
<simpara>Hamlet is the most sophisticated of the languages. Not only does it provide
syntax for generating HTML, it also allows for basic control structures:
conditionals, looping, and maybes.</simpara>
<section id="shakespearean-templates_tags">
<title>Tags</title>
<simpara>Obviously tags will play an important part of any HTML template language. In
Hamlet, we try to stick very close to existing HTML syntax to make the language
more comfortable. However, instead of using closing tags to denote nesting, we
use indentation. So something like this in HTML:</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;body&gt;
&lt;p&gt;Some paragraph.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Item 1&lt;/li&gt;
&lt;li&gt;Item 2&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;</programlisting>
<simpara>would be</simpara>
<programlisting language="hamlet" linenumbering="unnumbered">&lt;body&gt;
    &lt;p&gt;Some paragraph.
    &lt;ul&gt;
        &lt;li&gt;Item 1
        &lt;li&gt;Item 2</programlisting>
<simpara>In general, we find this to be easier to follow than HTML once you get
accustomed to it. The only tricky part comes with dealing with whitespace
before and after tags. For example, let&#8217;s say you want to create the HTML</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;p&gt;Paragraph &lt;i&gt;italic&lt;/i&gt; end.&lt;/p&gt;</programlisting>
<simpara>We want to make sure that whitespace is preserved after the word
"Paragraph" and before the word "end". To do so, we use two simple escape
characters:</simpara>
<programlisting language="hamlet" linenumbering="unnumbered">&lt;p&gt;
    Paragraph #
    &lt;i&gt;italic
    \ end.</programlisting>
<simpara>The whitespace escape rules are actually quite simple:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
If the first non-space character in a line is a backslash, the backslash is ignored. (Note: this will also cause any tag on this line to be treated as plain text.)
</simpara>
</listitem>
<listitem>
<simpara>
If the last character in a line is a hash, it is ignored.
</simpara>
</listitem>
</orderedlist>
<simpara>One other thing. Hamlet does <emphasis role="strong">not</emphasis> escape entities within its content. This is
done on purpose to allow existing HTML to be more easily copied in. So the
example above could also be written as:</simpara>
<programlisting language="hamlet" linenumbering="unnumbered">&lt;p&gt;Paragraph &lt;i&gt;italic&lt;/i&gt; end.</programlisting>
<simpara>Notice that the first tag will be automatically closed by Hamlet, while the
inner "i" tag will not. You are free to use whichever approach you want, there
is no penalty for either choice. Be aware, however, that the <emphasis role="strong">only</emphasis> time you
use closing tags in Hamlet is for such inline tags; normal tags are not closed.</simpara>
<simpara>Another outcome of this is that any tags after the first tag do not have
special treatment for IDs and classes. For example, the Hamlet snippet:</simpara>
<programlisting language="hamlet" linenumbering="unnumbered">&lt;p #firstid&gt;Paragraph &lt;i #secondid&gt;italic&lt;/i&gt; end.</programlisting>
<simpara>generates the HTML:</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;p id="firstid"&gt;Paragraph &lt;i #secondid&gt;italic&lt;/i&gt; end.&lt;/p&gt;</programlisting>
<simpara>Notice how the <literal>p</literal> tag is automatically closed, and its attributes get special
treatment, whereas the <literal>i</literal> tag is treated as plain text.</simpara>
</section>
<section id="shakespearean-templates_interpolation">
<title>Interpolation</title>
<simpara>What we have so far is a nice, simplified HTML, but it doesn&#8217;t let us interact
with our Haskell code at all. How do we pass in variables? Simple: with
interpolation:</simpara>
<programlisting language="hamlet" linenumbering="unnumbered">&lt;head&gt;
    &lt;title&gt;#{title}</programlisting>
<simpara>The hash followed by a pair of braces denotes <emphasis role="strong">variable interpolation</emphasis>. In the
case above, the <literal>title</literal> variable from the scope in which the template was
called will be used. Let me state that again: Hamlet automatically has access
to the variables in scope when it&#8217;s called. There is no need to specifically
pass variables in.</simpara>
<simpara>You can apply functions within an interpolation. You can use string and numeric
literals in an interpolation. You can use qualified modules. Both parentheses
and the dollar sign can be used to group statements together. And at the end,
the <literal>toHtml</literal> function is applied to the result, meaning <emphasis>any</emphasis> instance of
<literal>ToMarkup</literal> can be interpolated. Take, for instance, the following code.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">-- Just ignore the quasiquote stuff for now, and that shamlet thing.
-- It will be explained later.
{-# LANGUAGE QuasiQuotes #-}
import Text.Hamlet (shamlet)
import Text.Blaze.Html.Renderer.String (renderHtml)
import Data.Char (toLower)
import Data.List (sort)

data Person = Person
    { name :: String
    , age  :: Int
    }

main :: IO ()
main = putStrLn $ renderHtml [shamlet|
&lt;p&gt;Hello, my name is #{name person} and I am #{show $ age person}.
&lt;p&gt;
    Let's do some funny stuff with my name: #
    &lt;b&gt;#{sort $ map toLower (name person)}
&lt;p&gt;Oh, and in 5 years I'll be #{show ((+) 5 (age person))} years old.
|]
  where
    person = Person "Michael" 26</programlisting>
<simpara>What about our much-touted type-safe URLs? They are almost identical to
variable interpolation in every way, except they start with an at-sign (<literal>@</literal>)
instead. In addition, there is embedding via a caret (<literal>^</literal>) which allows you to
embed another template of the same type. The next code sample demonstrates both
of these.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE OverloadedStrings #-}
import Text.Hamlet (HtmlUrl, hamlet)
import Text.Blaze.Html.Renderer.String (renderHtml)
import Data.Text (Text)

data MyRoute = Home

render :: MyRoute -&gt; [(Text, Text)] -&gt; Text
render Home _ = "/home"

footer :: HtmlUrl MyRoute
footer = [hamlet|
&lt;footer&gt;
    Return to #
    &lt;a href=@{Home}&gt;Homepage
    .
|]

main :: IO ()
main = putStrLn $ renderHtml $ [hamlet|
&lt;body&gt;
    &lt;p&gt;This is my page.
    ^{footer}
|] render</programlisting>
<simpara>Additionally, there is a variant of URL interpolation which allows you to embed
query string parameters. This can be useful, for example, for creating
paginated responses. Instead of using <literal>@{&#8230;}</literal>, you add a question mark
(<literal>@?{&#8230;}</literal>) to indicate the presence of a query string. The value you provide
must be a two-tuple with the first value being a type-safe URL and the second
being a list of query string parameter pairs. See the next code snippet for an
example.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE OverloadedStrings #-}
import Text.Hamlet (HtmlUrl, hamlet)
import Text.Blaze.Html.Renderer.String (renderHtml)
import Data.Text (Text, append, pack)
import Control.Arrow (second)
import Network.HTTP.Types (renderQueryText)
import Data.Text.Encoding (decodeUtf8)
import Blaze.ByteString.Builder (toByteString)

data MyRoute = SomePage

render :: MyRoute -&gt; [(Text, Text)] -&gt; Text
render SomePage params = "/home" `append`
    decodeUtf8 (toByteString $ renderQueryText True (map (second Just) params))

main :: IO ()
main = do
    let currPage = 2 :: Int
    putStrLn $ renderHtml $ [hamlet|
&lt;p&gt;
    You are currently on page #{currPage}.
    &lt;a href=@?{(SomePage, [("page", pack $ show $ currPage - 1)])}&gt;Previous
    &lt;a href=@?{(SomePage, [("page", pack $ show $ currPage + 1)])}&gt;Next
|] render</programlisting>
<simpara>This generates the expected HTML:</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;p&gt;You are currently on page 2.
&lt;a href="/home?page=1"&gt;Previous&lt;/a&gt;
&lt;a href="/home?page=3"&gt;Next&lt;/a&gt;
&lt;/p&gt;</programlisting>
</section>
<section id="shakespearean-templates_attributes">
<title>Attributes</title>
<simpara>In that last example, we put an href attribute on the "a" tag. Let&#8217;s elaborate on the syntax:</simpara>
<itemizedlist>
<listitem>
<simpara>
You can have interpolations within the attribute value.
</simpara>
</listitem>
<listitem>
<simpara>
The equals sign and value for an attribute are optional, just like in HTML.
  So <literal>&lt;input type=checkbox checked&gt;</literal> is perfectly valid.
</simpara>
</listitem>
<listitem>
<simpara>
There are two convenience attributes: for id, you can use the hash, and for
  classes, the period. In other words, <literal>&lt;p #paragraphid .class1 .class2&gt;</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
While quotes around the attribute value are optional, they are required if
  you want to embed spaces.
</simpara>
</listitem>
<listitem>
<simpara>
You can add an attribute optionally by using colons. To make a checkbox only
  checked if the variable isChecked is True, you would write
  <literal>&lt;input type=checkbox :isChecked:checked&gt;</literal>. To have a paragraph be optionally red,
  you could use <literal>&lt;p :isRed:style="color:red"&gt;</literal>. (This also works for class names, e.g.,
  <literal>&lt;p :isCurrent:.current&gt;</literal> will set the class <literal>current</literal> if <literal>isCurrent</literal> is <literal>True</literal>.)
</simpara>
</listitem>
<listitem>
<simpara>
Arbitrary key-value pairs can also be interpolated using the <literal>*{â€¦}</literal>
  syntax. The interpolated variable must be a tuple, or list of
  tuples, of Text or String.  For example: if we have a variable
  <literal>attrs = [("foo", "bar")]</literal>, we could interpolate that into an
  element like: <literal>&lt;p *{attrs}&gt;</literal> to get <literal>&lt;p foo="bar"&gt;</literal>.
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="shakespearean-templates_conditionals">
<title>Conditionals</title>
<simpara>Eventually, you&#8217;ll want to put in some logic in your page. The goal of Hamlet
is to make the logic as minimalistic as possible, pushing the heavy lifting
into Haskell. As such, our logical statements are very basic&#8230; so basic, that
it&#8217;s <literal>if</literal>, <literal>elseif</literal>, and <literal>else</literal>.</simpara>
<programlisting language="hamlet" linenumbering="unnumbered">$if isAdmin
    &lt;p&gt;Welcome to the admin section.
$elseif isLoggedIn
    &lt;p&gt;You are not the administrator.
$else
    &lt;p&gt;I don't know who you are. Please log in so I can decide if you get access.</programlisting>
<simpara>All the same rules of normal interpolation apply to the content of the conditionals.</simpara>
</section>
<section id="shakespearean-templates_maybe">
<title>Maybe</title>
<simpara>Similarly, we have a special construct for dealing with Maybe values. This
could technically be dealt with using <literal>if</literal>, <literal>isJust</literal> and <literal>fromJust</literal>, but this
is more convenient and avoids partial functions.</simpara>
<programlisting language="hamlet" linenumbering="unnumbered">$maybe name &lt;- maybeName
    &lt;p&gt;Your name is #{name}
$nothing
    &lt;p&gt;I don't know your name.</programlisting>
<simpara>In addition to simple identifiers, you can use a few other, more complicated
values on the left hand side, such as constructors and tuples.</simpara>
<programlisting language="hamlet" linenumbering="unnumbered">$maybe Person firstName lastName &lt;- maybePerson
    &lt;p&gt;Your name is #{firstName} #{lastName}</programlisting>
<simpara>The right-hand-side follows the same rules as interpolations, allow variables,
function application, and so on.</simpara>
</section>
<section id="shakespearean-templates_forall">
<title>Forall</title>
<simpara>And what about looping over lists? We have you covered there too:</simpara>
<programlisting language="hamlet" linenumbering="unnumbered">$if null people
    &lt;p&gt;No people.
$else
    &lt;ul&gt;
        $forall person &lt;- people
            &lt;li&gt;#{person}</programlisting>
</section>
<section id="shakespearean-templates_case">
<title>Case</title>
<simpara>Pattern matching is one of the great strengths of Haskell. Sum types let you
cleanly model many real-world types, and <literal>case</literal> statements let you safely
match, letting the compiler warn you if you missed a case. Hamlet gives you the
same power.</simpara>
<programlisting language="hamlet" linenumbering="unnumbered">$case foo
    $of Left bar
        &lt;p&gt;It was left: #{bar}
    $of Right baz
        &lt;p&gt;It was right: #{baz}</programlisting>
</section>
<section id="shakespearean-templates_with">
<title>With</title>
<simpara>Rounding out our statements, we have <literal>with</literal>. It&#8217;s basically just a convenience
for declaring a synonym for a long expression.</simpara>
<programlisting language="hamlet" linenumbering="unnumbered">$with foo &lt;- some very (long ugly) expression that $ should only $ happen once
    &lt;p&gt;But I'm going to use #{foo} multiple times. #{foo}</programlisting>
</section>
<section id="shakespearean-templates_doctype">
<title>Doctype</title>
<simpara>Last bit of syntactic sugar: the doctype statement. We have support for a
number of different versions of a <literal>doctype</literal>, though we recommend <literal>$doctype 5</literal>
for modern web applications, which generates <literal>&lt;!DOCTYPE html&gt;</literal>.</simpara>
<programlisting language="hamlet" linenumbering="unnumbered">$doctype 5
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Hamlet is Awesome
    &lt;body&gt;
        &lt;p&gt;All done.</programlisting>
<note><simpara>There is an older and still supported syntax: three exclamation points
(<literal>!!!</literal>). You may still see this in code out there. We have no plans to remove
support for this, but in general find the <literal>$doctype</literal> approach easier to read.</simpara></note>
</section>
</section>
<section id="shakespearean-templates_lucius_syntax">
<title>Lucius Syntax</title>
<simpara>Lucius is one of two CSS templating languages in the Shakespeare family. It is
intended to be a superset of CSS, leveraging the existing syntax while adding
in a few more features.</simpara>
<itemizedlist>
<listitem>
<simpara>
Like Hamlet, we allow both variable and URL interpolation.
</simpara>
</listitem>
<listitem>
<simpara>
CSS blocks are allowed to nest.
</simpara>
</listitem>
<listitem>
<simpara>
You can declare variables in your templates.
</simpara>
</listitem>
<listitem>
<simpara>
A set of CSS properties can be created as a mixin, and reused in multiple
  declarations.
</simpara>
</listitem>
</itemizedlist>
<simpara>Starting with the second point: let&#8217;s say you want to have some special styling
for some tags within your <literal>article</literal>. In plain ol' CSS, you&#8217;d have to write:</simpara>
<programlisting language="css" linenumbering="unnumbered">article code { background-color: grey; }
article p { text-indent: 2em; }
article a { text-decoration: none; }</programlisting>
<simpara>In this case, there aren&#8217;t that many clauses, but having to type out article
each time is still a bit of a nuisance. Imagine if you had a dozen or so of
these. Not the worst thing in the world, but a bit of an annoyance. Lucius
helps you out here:</simpara>
<programlisting language="lucius" linenumbering="unnumbered">article {
    code { background-color: grey; }
    p { text-indent: 2em; }
    a { text-decoration: none; }
    &gt; h1 { color: green; }
}</programlisting>
<simpara>Having Lucius variables allows you to avoid repeating yourself. A simple
example would be to define a commonly used color:</simpara>
<programlisting language="lucius" linenumbering="unnumbered">@textcolor: #ccc; /* just because we hate our users */
body { color: #{textcolor} }
a:link, a:visited { color: #{textcolor} }</programlisting>
<simpara>Mixins are a relatively new addition to Lucius. The idea is to declare a mixin
providing a collection of properties, and then embed that mixin in a template
using caret interpolation (<literal>^</literal>). The following example demonstrates how we
could use a mixin to deal with vendor prefixes.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE QuasiQuotes #-}
import Text.Lucius
import qualified Data.Text.Lazy.IO as TLIO

-- Dummy render function.
render = undefined

-- Our mixin, which provides a number of vendor prefixes for transitions.
transition val =
    [luciusMixin|
        -webkit-transition: #{val};
        -moz-transition: #{val};
        -ms-transition: #{val};
        -o-transition: #{val};
        transition: #{val};
    |]

-- Our actual Lucius template, which uses the mixin.
myCSS =
    [lucius|
        .some-class {
            ^{transition "all 4s ease"}
        }
    |]

main = TLIO.putStrLn $ renderCss $ myCSS render</programlisting>
</section>
<section id="shakespearean-templates_cassius_syntax">
<title>Cassius Syntax</title>
<simpara>Cassius is a whitespace-sensitive alternative to Lucius. As mentioned in the
synopsis, it uses the same processing engine as Lucius, but preprocesses all
input to insert braces to enclose subblocks and semicolons to terminate lines.
This means you can leverage all features of Lucius when writing Cassius. As a
simple example:</simpara>
<programlisting language="cassius" linenumbering="unnumbered">#banner
    border: 1px solid #{bannerColor}
    background-image: url(@{BannerImageR})</programlisting>
</section>
<section id="shakespearean-templates_julius_syntax">
<title>Julius Syntax</title>
<simpara>Julius is the simplest of the languages discussed here. In fact, some might
even say it&#8217;s really just JavaScript. Julius allows the three forms of
interpolation we&#8217;ve mentioned so far, and otherwise applies no transformations
to your content.</simpara>
<note><simpara>If you use Julius with the scaffolded Yesod site, you may notice that
your JavaScript is automatically minified. This is not a feature of Julius;
instead, Yesod uses the hjsmin package to minify Julius output.</simpara></note>
</section>
</section>
<section id="shakespearean-templates_calling_shakespeare">
<title>Calling Shakespeare</title>
<simpara>The question of course arises at some point: how do I actually use this stuff?
There are three different ways to call out to Shakespeare from your Haskell
code:</simpara>
<variablelist>
<varlistentry>
<term>
Quasiquotes
</term>
<listitem>
<simpara>
Quasiquotes allow you to embed arbitrary content within your Haskell, and for it to be converted into Haskell code at compile time.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
External file
</term>
<listitem>
<simpara>
In this case, the template code is in a separate file which is referenced via Template Haskell.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Reload mode
</term>
<listitem>
<simpara>
Both of the above modes require a full recompile to see any changes. In reload mode, your template is kept in a separate file and referenced via Template Haskell. But at runtime, the external file is reparsed from scratch each time.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<note><simpara>Reload mode is not available for Hamlet, only for Cassius, Lucius and
Julius. There are too many sophisticated features in Hamlet that rely directly
on the Haskell compiler and could not feasibly be reimplemented at runtime.</simpara></note>
<simpara>One of the first two approaches should be used in production. They both embed
the entirety of the template in the final executable, simplifying deployment
and increasing performance. The advantage of the quasiquoter is the simplicity:
everything stays in a single file. For short templates, this can be a very good
fit. However, in general, the external file approach is recommended because:</simpara>
<itemizedlist>
<listitem>
<simpara>
It follows nicely in the tradition of separating logic from presentation.
</simpara>
</listitem>
<listitem>
<simpara>
You can easily switch between external file and debug mode with some simple
  CPP macros, meaning you can keep rapid development and still achieve high
  performance in production.
</simpara>
</listitem>
</itemizedlist>
<simpara>Since these are special QuasiQuoters and Template Haskell functions, you need
to be sure to enable the appropriate language extensions and use correct
syntax. You can see a simple example of each in the following code snippets.</simpara>
<formalpara><title>Quasiquoter</title><para>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE OverloadedStrings #-} -- we're using Text below
{-# LANGUAGE QuasiQuotes #-}
import Text.Hamlet (HtmlUrl, hamlet)
import Data.Text (Text)
import Text.Blaze.Html.Renderer.String (renderHtml)

data MyRoute = Home | Time | Stylesheet

render :: MyRoute -&gt; [(Text, Text)] -&gt; Text
render Home _ = "/home"
render Time _ = "/time"
render Stylesheet _ = "/style.css"

template :: Text -&gt; HtmlUrl MyRoute
template title = [hamlet|
$doctype 5
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;#{title}
        &lt;link rel=stylesheet href=@{Stylesheet}&gt;
    &lt;body&gt;
        &lt;h1&gt;#{title}
|]

main :: IO ()
main = putStrLn $ renderHtml $ template "My Title" render</programlisting>
</para></formalpara>
<formalpara><title>External file</title><para>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE OverloadedStrings #-} -- we're using Text below
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE CPP #-} -- to control production versus debug
import Text.Lucius (CssUrl, luciusFile, luciusFileReload, renderCss)
import Data.Text (Text)
import qualified Data.Text.Lazy.IO as TLIO

data MyRoute = Home | Time | Stylesheet

render :: MyRoute -&gt; [(Text, Text)] -&gt; Text
render Home _ = "/home"
render Time _ = "/time"
render Stylesheet _ = "/style.css"

template :: CssUrl MyRoute
#if PRODUCTION
template = $(luciusFile "template.lucius")
#else
template = $(luciusFileReload "template.lucius")
#endif

main :: IO ()
main = TLIO.putStrLn $ renderCss $ template render</programlisting>
</para></formalpara>
<programlisting language="lucius" linenumbering="unnumbered">/* @template.lucius */
foo { bar: baz }</programlisting>
<simpara>The naming scheme for the functions is very consistent.</simpara>
<informaltable
frame="all"
rowsep="1" colsep="1"
>
<tgroup cols="4">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<colspec colname="col_4" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Language</entry>
<entry align="left" valign="top">Quasiquoter</entry>
<entry align="left" valign="top">External file</entry>
<entry align="left" valign="top">Reload</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Hamlet</simpara></entry>
<entry align="left" valign="top"><simpara>hamlet</simpara></entry>
<entry align="left" valign="top"><simpara><literal>hamletFile</literal></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>N/A</emphasis></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Cassius</simpara></entry>
<entry align="left" valign="top"><simpara><literal>cassius</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>cassiusFile</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>cassiusFileReload</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Lucius</simpara></entry>
<entry align="left" valign="top"><simpara><literal>lucius</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>luciusFile</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>luciusFileReload</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Julius</simpara></entry>
<entry align="left" valign="top"><simpara><literal>julius</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>juliusFile</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>juliusFileReload</literal></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<section id="shakespearean-templates_alternate_hamlet_types">
<title>Alternate Hamlet Types</title>
<simpara>So far, we&#8217;ve seen how to generate an <literal>HtmlUrl</literal> value from Hamlet, which is a
piece of HTML with embedded type-safe URLs. There are currently three other
values we can generate using Hamlet: plain HTML, HTML with URLs <emphasis role="strong">and</emphasis>
internationalized messages, and widgets. That last one will be covered in more
detail in the widgets chapter.</simpara>
<simpara>To generate plain HTML without any embedded URLs, we use "simplified Hamlet".
There are a few changes:</simpara>
<itemizedlist>
<listitem>
<simpara>
We use a different set of functions, prefixed with an "s". So the quasiquoter
  is <literal>shamlet</literal> and the external file function is <literal>shamletFile</literal>. How we
  pronounce this is still up for debate.
</simpara>
</listitem>
<listitem>
<simpara>
No URL interpolation is allowed. Doing so will result in a compile-time
  error.
</simpara>
</listitem>
<listitem>
<simpara>
Embedding (the caret-interpolator) no longer allows arbitrary <literal>HtmlUrl</literal>
  values. The rule is that the embedded value must have the same type as the
  template itself, so in this case it must be <literal>Html</literal>. That means that for
  <literal>shamlet</literal>, embedding can be completely replaced with normal variable
  interpolation (with a hash).
</simpara>
</listitem>
</itemizedlist>
<simpara>Dealing with internationalization (i18n) in Hamlet is a bit complicated. Hamlet
supports i18n via a message datatype, very similar in concept and
implementation to a type-safe URL. As a motivating example, let&#8217;s say we want
to have an application that tells you hello and how many apples you bought.
We could represent those messages with a datatype.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">data Msg = Hello | Apples Int</programlisting>
<simpara>Next, we would want to be able to convert that into something human-readable,
so we define some render functions:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">renderEnglish :: Msg -&gt; Text
renderEnglish Hello = "Hello"
renderEnglish (Apples 0) = "You did not buy any apples."
renderEnglish (Apples 1) = "You bought 1 apple."
renderEnglish (Apples i) = T.concat ["You bought ", T.pack $ show i, " apples."]</programlisting>
<simpara>Now we want to interpolate those Msg values directly in the template. For that, we use underscore interpolation.</simpara>
<programlisting language="hamlet" linenumbering="unnumbered">$doctype 5
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;i18n
    &lt;body&gt;
        &lt;h1&gt;_{Hello}
        &lt;p&gt;_{Apples count}</programlisting>
<simpara>This kind of a template now needs some way to turn those values into HTML. So
just like type-safe URLs, we pass in a render function. To represent this, we
define a new type synonym:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">type Render url = url -&gt; [(Text, Text)] -&gt; Text
type Translate msg = msg -&gt; Html
type HtmlUrlI18n msg url = Translate msg -&gt; Render url -&gt; Html</programlisting>
<simpara>At this point, you can pass <literal>renderEnglish</literal>, <literal>renderSpanish</literal>, or
<literal>renderKlingon</literal> to this template, and it will generate nicely translated output
(depending, of course, on the quality of your translators). The complete
program is:</simpara>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE OverloadedStrings #-}
import Data.Text (Text)
import qualified Data.Text as T
import Text.Hamlet (HtmlUrlI18n, ihamlet)
import Text.Blaze.Html (toHtml)
import Text.Blaze.Html.Renderer.String (renderHtml)

data MyRoute = Home | Time | Stylesheet

renderUrl :: MyRoute -&gt; [(Text, Text)] -&gt; Text
renderUrl Home _ = "/home"
renderUrl Time _ = "/time"
renderUrl Stylesheet _ = "/style.css"

data Msg = Hello | Apples Int

renderEnglish :: Msg -&gt; Text
renderEnglish Hello = "Hello"
renderEnglish (Apples 0) = "You did not buy any apples."
renderEnglish (Apples 1) = "You bought 1 apple."
renderEnglish (Apples i) = T.concat ["You bought ", T.pack $ show i, " apples."]

template :: Int -&gt; HtmlUrlI18n Msg MyRoute
template count = [ihamlet|
$doctype 5
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;i18n
    &lt;body&gt;
        &lt;h1&gt;_{Hello}
        &lt;p&gt;_{Apples count}
|]

main :: IO ()
main = putStrLn $ renderHtml
     $ (template 5) (toHtml . renderEnglish) renderUrl</programlisting>
</section>
</section>
<section id="shakespearean-templates_other_shakespeare">
<title>Other Shakespeare</title>
<simpara>In addition to HTML, CSS and JavaScript helpers, there is also some more
general-purpose Shakespeare available. shakespeare-text provides a simple way
to create interpolated strings, much like people are accustomed to in scripting
languages like Ruby and Python. This package&#8217;s utility is definitely not
limited to Yesod.</simpara>
<programlisting language="haskell" linenumbering="unnumbered">{-# LANGUAGE QuasiQuotes, OverloadedStrings #-}
import Text.Shakespeare.Text
import qualified Data.Text.Lazy.IO as TLIO
import Data.Text (Text)
import Control.Monad (forM_)

data Item = Item
    { itemName :: Text
    , itemQty :: Int
    }

items :: [Item]
items =
    [ Item "apples" 5
    , Item "bananas" 10
    ]

main :: IO ()
main = forM_ items $ \item -&gt; TLIO.putStrLn
    [lt|You have #{show $ itemQty item} #{itemName item}.|]</programlisting>
<simpara>Some quick points about this simple example:</simpara>
<itemizedlist>
<listitem>
<simpara>
Notice that we have three different textual datatypes involved (<literal>String</literal>,
  strict <literal>Text</literal> and lazy <literal>Text</literal>). They all play together well.
</simpara>
</listitem>
<listitem>
<simpara>
We use a quasiquoter named <literal>lt</literal>, which generates lazy text. There is also
  <literal>st</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
Also, there are longer names for these quasiquoters (<literal>ltext</literal> and <literal>stext</literal>).
</simpara>
</listitem>
<listitem>
<simpara>
The syntax for variable interpolation for Text.Shakespeare.Text is the same
  as described above.  Note that <literal>^{..}</literal> and <literal>@{..}</literal> are also recognized in
  <literal>lt</literal> and <literal>st</literal>. If the output of a template should contain <literal>^{..}</literal>, a
  backslash can be used to prevent the interpolation,
  e.g. <literal>[lt|2^\{\23}|]</literal>. The backslash is removed from the resulting text.
</simpara>
</listitem>
</itemizedlist>
</section>
<section id="shakespearean-templates_general_recommendations">
<title>General Recommendations</title>
<simpara>Here are some general hints from the Yesod community on how to get the most out
of Shakespeare.</simpara>
<itemizedlist>
<listitem>
<simpara>
For actual sites, use external files. For libraries, it&#8217;s OK to use
  quasiquoters, assuming they aren&#8217;t too long.
</simpara>
</listitem>
<listitem>
<simpara>
Patrick Brisbin has put together a
  <ulink url="https://github.com/pbrisbin/html-template-syntax">Vim code
  highlighter</ulink> that can help out immensely.
</simpara>
</listitem>
<listitem>
<simpara>
You should almost always start Hamlet tags on their own line instead of
  embedding start/end tags after an existing tag. The only exception to this is
  the occasional <literal>&lt;i&gt;</literal> or <literal>&lt;b&gt;</literal> tag inside a large block of text.
</simpara>
</listitem>
</itemizedlist>
</section>
</section>
</article>
